version: "3"
services:
  nginx:
    image: nginx:1.24.0
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - "../../configs/nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "../../_data/nginx/logs:/var/log/nginx"
    networks:
      - douyin_net
    depends_on:
      account-service:
        condition: service_started
      chat-service:
        condition: service_started
      passport-service:
        condition: service_started
      relation-service:
        condition: service_started
      publish-service:
        condition: service_started
      favorite-service:
        condition: service_started
      feed-service:
        condition: service_started
      comment-service:
        condition: service_started

  etcd:
    image: bitnami/etcd
    container_name: etcd
    ports:
      - "12379:2379"
      - "12380:2380"
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:2379/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - douyin_net

  mysql:
    image: mysql/mysql-server:8.0.32
    container_name: mysql
    privileged: true
    restart: always
    ports:
      - "3306:3306"
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: uvVFljcDfc2an4U
      MYSQL_DATABASE: douyin
      MYSQL_ROOT_HOST: "%"
    volumes:
      - ../../_data/mysql/data:/var/lib/mysql:rw
    command: --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    healthcheck:
      test: [ "CMD", "mysql", "-uroot", "-puvVFljcDfc2an4U" ]
      interval: 5s
      retries: 3
    networks:
      - douyin_net

  redis:
    image: redis:7.0.12
    container_name: redis
    privileged: true
    restart: always
    ports:
      - "16379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ../../_data/redis/data:/data:rw
    command: "redis-server --requirepass uvVFljcDfc2an4U  --appendonly yes"
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "uvVFljcDfc2an4U", "ping" ]
      interval: 5s
      retries: 3
    networks:
      - douyin_net

  minio:
    image: "minio/minio:latest"
    container_name: minio
    ports:
      - "19000:9000"
      - "19090:9090"
    environment:
      - MINIO_ACCESS_KEY=douyin
      - MINIO_SECRET_KEY=xnQpG8QhRprggUb
    command: server /data --console-address ":9090"
    volumes:
      - ../../_data/minio/data:/data:rw
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:19090/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - douyin_net

  kafka:
    image: docker.io/bitnami/kafka:3.5.1
    restart: always
    user: root
    container_name: kafka
    volumes:
      - ../../_data/kafka:/bitnami/kafka:rw #持久化数据
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_KRAFT_CLUSTER_ID=LelM2dIFQkiUFvXCEcqRWA
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms256M
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      # broker.id，必须唯一
      - KAFKA_BROKER_ID=1
    healthcheck:
      test:
        [
          "CMD",
          "/opt/bitnami/kafka/bin/kafka-topics.sh",
          "--list",
          "--bootstrap-server=localhost:9092",
        ]
      interval: 5s
      retries: 3
    networks:
      - douyin_net

  memcached:
    image: memcached:latest
    container_name: memcached
    ports:
      - "11211:11211"
    restart: always
    healthcheck:
      test: [ "CMD", "memcached", "-h" ]
      interval: 5s
      retries: 3
    networks:
      - douyin_net

  seq-server:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=infra
        - SERVICE_NAME=seq-server
        - SERVICE_TYPE=service
    container_name: seq-server
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy


  account-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=user
        - SERVICE_NAME=account
        - SERVICE_TYPE=service
    container_name: account-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  #  chat-job:
  #    build:
  #      context: ../../
  #      dockerfile: docker/build/Dockerfile
  #      args:
  #        - BUSINESS_NAME=user
  #        - SERVICE_NAME=chat
  #        - SERVICE_TYPE=job
  #    container_name: chat-job
  #    privileged: true
  #    restart: always
  #    networks:
  #      - douyin_net
  #    depends_on:
  #      mysql:
  #        condition: service_healthy
  #      kafka:
  #        condition: service_healthy
  #      redis:
  #        condition: service_healthy

  chat-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=user
        - SERVICE_NAME=chat
        - SERVICE_TYPE=service
    container_name: chat-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  passport-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=user
        - SERVICE_NAME=passport
        - SERVICE_TYPE=service
    container_name: passport-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  relation-job:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=user
        - SERVICE_NAME=relation
        - SERVICE_TYPE=job
    container_name: relation-job
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  relation-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=user
        - SERVICE_NAME=relation
        - SERVICE_TYPE=service
    container_name: relation-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  publish-job:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=video
        - SERVICE_NAME=publish
        - SERVICE_TYPE=job
    container_name: publish-job
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  publish-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=video
        - SERVICE_NAME=publish
        - SERVICE_TYPE=service
    container_name: publish-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  favorite-job:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=video
        - SERVICE_NAME=favorite
        - SERVICE_TYPE=job
    container_name: favorite-job
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  favorite-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=video
        - SERVICE_NAME=favorite
        - SERVICE_TYPE=service
    container_name: favorite-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  feed-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=video
        - SERVICE_NAME=feed
        - SERVICE_TYPE=service
    container_name: feed-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  comment-job:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=video
        - SERVICE_NAME=comment
        - SERVICE_TYPE=job
    container_name: comment-job
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

  comment-service:
    build:
      context: ../../
      dockerfile: docker/build/Dockerfile
      args:
        - BUSINESS_NAME=video
        - SERVICE_NAME=comment
        - SERVICE_TYPE=service
    container_name: comment-service
    privileged: true
    restart: always
    networks:
      - douyin_net
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      memcached:
        condition: service_healthy
      minio:
        condition: service_healthy
      etcd:
        condition: service_healthy

networks:
  douyin_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.0.0/16