// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/comment/service/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommentActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentActionRequestMultiError, or nil if none found.
func (m *CommentActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for VideoId

	// no validation rules for ActionType

	if m.CommentText != nil {
		// no validation rules for CommentText
	}

	if m.CommentId != nil {
		// no validation rules for CommentId
	}

	if len(errors) > 0 {
		return CommentActionRequestMultiError(errors)
	}

	return nil
}

// CommentActionRequestMultiError is an error wrapping multiple validation
// errors returned by CommentActionRequest.ValidateAll() if the designated
// constraints aren't met.
type CommentActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentActionRequestMultiError) AllErrors() []error { return m }

// CommentActionRequestValidationError is the validation error returned by
// CommentActionRequest.Validate if the designated constraints aren't met.
type CommentActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentActionRequestValidationError) ErrorName() string {
	return "CommentActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentActionRequestValidationError{}

// Validate checks the field values on CommentActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentActionResponseMultiError, or nil if none found.
func (m *CommentActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if m.Comment != nil {

		if all {
			switch v := interface{}(m.GetComment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentActionResponseValidationError{
						field:  "Comment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentActionResponseValidationError{
						field:  "Comment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentActionResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommentActionResponseMultiError(errors)
	}

	return nil
}

// CommentActionResponseMultiError is an error wrapping multiple validation
// errors returned by CommentActionResponse.ValidateAll() if the designated
// constraints aren't met.
type CommentActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentActionResponseMultiError) AllErrors() []error { return m }

// CommentActionResponseValidationError is the validation error returned by
// CommentActionResponse.Validate if the designated constraints aren't met.
type CommentActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentActionResponseValidationError) ErrorName() string {
	return "CommentActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommentActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentActionResponseValidationError{}

// Validate checks the field values on GetCommentListByVideoIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListByVideoIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListByVideoIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommentListByVideoIdRequestMultiError, or nil if none found.
func (m *GetCommentListByVideoIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListByVideoIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return GetCommentListByVideoIdRequestMultiError(errors)
	}

	return nil
}

// GetCommentListByVideoIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommentListByVideoIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCommentListByVideoIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListByVideoIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListByVideoIdRequestMultiError) AllErrors() []error { return m }

// GetCommentListByVideoIdRequestValidationError is the validation error
// returned by GetCommentListByVideoIdRequest.Validate if the designated
// constraints aren't met.
type GetCommentListByVideoIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListByVideoIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListByVideoIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListByVideoIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListByVideoIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListByVideoIdRequestValidationError) ErrorName() string {
	return "GetCommentListByVideoIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListByVideoIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListByVideoIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListByVideoIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListByVideoIdRequestValidationError{}

// Validate checks the field values on GetCommentListByVideoIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentListByVideoIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentListByVideoIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommentListByVideoIdResponseMultiError, or nil if none found.
func (m *GetCommentListByVideoIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentListByVideoIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetCommentList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentListByVideoIdResponseValidationError{
						field:  fmt.Sprintf("CommentList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentListByVideoIdResponseValidationError{
						field:  fmt.Sprintf("CommentList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentListByVideoIdResponseValidationError{
					field:  fmt.Sprintf("CommentList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetCommentListByVideoIdResponseMultiError(errors)
	}

	return nil
}

// GetCommentListByVideoIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommentListByVideoIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCommentListByVideoIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentListByVideoIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentListByVideoIdResponseMultiError) AllErrors() []error { return m }

// GetCommentListByVideoIdResponseValidationError is the validation error
// returned by GetCommentListByVideoIdResponse.Validate if the designated
// constraints aren't met.
type GetCommentListByVideoIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentListByVideoIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentListByVideoIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentListByVideoIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentListByVideoIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentListByVideoIdResponseValidationError) ErrorName() string {
	return "GetCommentListByVideoIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentListByVideoIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentListByVideoIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentListByVideoIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentListByVideoIdResponseValidationError{}

// Validate checks the field values on CountCommentByVideoIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountCommentByVideoIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountCommentByVideoIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountCommentByVideoIdRequestMultiError, or nil if none found.
func (m *CountCommentByVideoIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountCommentByVideoIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return CountCommentByVideoIdRequestMultiError(errors)
	}

	return nil
}

// CountCommentByVideoIdRequestMultiError is an error wrapping multiple
// validation errors returned by CountCommentByVideoIdRequest.ValidateAll() if
// the designated constraints aren't met.
type CountCommentByVideoIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountCommentByVideoIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountCommentByVideoIdRequestMultiError) AllErrors() []error { return m }

// CountCommentByVideoIdRequestValidationError is the validation error returned
// by CountCommentByVideoIdRequest.Validate if the designated constraints
// aren't met.
type CountCommentByVideoIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountCommentByVideoIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountCommentByVideoIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountCommentByVideoIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountCommentByVideoIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountCommentByVideoIdRequestValidationError) ErrorName() string {
	return "CountCommentByVideoIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountCommentByVideoIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountCommentByVideoIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountCommentByVideoIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountCommentByVideoIdRequestValidationError{}

// Validate checks the field values on CountCommentByVideoIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountCommentByVideoIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountCommentByVideoIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CountCommentByVideoIdResponseMultiError, or nil if none found.
func (m *CountCommentByVideoIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountCommentByVideoIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for CommentCount

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return CountCommentByVideoIdResponseMultiError(errors)
	}

	return nil
}

// CountCommentByVideoIdResponseMultiError is an error wrapping multiple
// validation errors returned by CountCommentByVideoIdResponse.ValidateAll()
// if the designated constraints aren't met.
type CountCommentByVideoIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountCommentByVideoIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountCommentByVideoIdResponseMultiError) AllErrors() []error { return m }

// CountCommentByVideoIdResponseValidationError is the validation error
// returned by CountCommentByVideoIdResponse.Validate if the designated
// constraints aren't met.
type CountCommentByVideoIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountCommentByVideoIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountCommentByVideoIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountCommentByVideoIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountCommentByVideoIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountCommentByVideoIdResponseValidationError) ErrorName() string {
	return "CountCommentByVideoIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountCommentByVideoIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountCommentByVideoIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountCommentByVideoIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountCommentByVideoIdResponseValidationError{}

// Validate checks the field values on MCountCommentByVideoIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MCountCommentByVideoIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MCountCommentByVideoIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MCountCommentByVideoIdRequestMultiError, or nil if none found.
func (m *MCountCommentByVideoIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MCountCommentByVideoIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MCountCommentByVideoIdRequestMultiError(errors)
	}

	return nil
}

// MCountCommentByVideoIdRequestMultiError is an error wrapping multiple
// validation errors returned by MCountCommentByVideoIdRequest.ValidateAll()
// if the designated constraints aren't met.
type MCountCommentByVideoIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MCountCommentByVideoIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MCountCommentByVideoIdRequestMultiError) AllErrors() []error { return m }

// MCountCommentByVideoIdRequestValidationError is the validation error
// returned by MCountCommentByVideoIdRequest.Validate if the designated
// constraints aren't met.
type MCountCommentByVideoIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MCountCommentByVideoIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MCountCommentByVideoIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MCountCommentByVideoIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MCountCommentByVideoIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MCountCommentByVideoIdRequestValidationError) ErrorName() string {
	return "MCountCommentByVideoIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MCountCommentByVideoIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMCountCommentByVideoIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MCountCommentByVideoIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MCountCommentByVideoIdRequestValidationError{}

// Validate checks the field values on MCountCommentByVideoIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MCountCommentByVideoIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MCountCommentByVideoIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MCountCommentByVideoIdResponseMultiError, or nil if none found.
func (m *MCountCommentByVideoIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MCountCommentByVideoIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return MCountCommentByVideoIdResponseMultiError(errors)
	}

	return nil
}

// MCountCommentByVideoIdResponseMultiError is an error wrapping multiple
// validation errors returned by MCountCommentByVideoIdResponse.ValidateAll()
// if the designated constraints aren't met.
type MCountCommentByVideoIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MCountCommentByVideoIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MCountCommentByVideoIdResponseMultiError) AllErrors() []error { return m }

// MCountCommentByVideoIdResponseValidationError is the validation error
// returned by MCountCommentByVideoIdResponse.Validate if the designated
// constraints aren't met.
type MCountCommentByVideoIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MCountCommentByVideoIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MCountCommentByVideoIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MCountCommentByVideoIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MCountCommentByVideoIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MCountCommentByVideoIdResponseValidationError) ErrorName() string {
	return "MCountCommentByVideoIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MCountCommentByVideoIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMCountCommentByVideoIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MCountCommentByVideoIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MCountCommentByVideoIdResponseValidationError{}

// Validate checks the field values on CommentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentInfoMultiError, or
// nil if none found.
func (m *CommentInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentInfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentInfoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for CreateDate

	if len(errors) > 0 {
		return CommentInfoMultiError(errors)
	}

	return nil
}

// CommentInfoMultiError is an error wrapping multiple validation errors
// returned by CommentInfo.ValidateAll() if the designated constraints aren't met.
type CommentInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentInfoMultiError) AllErrors() []error { return m }

// CommentInfoValidationError is the validation error returned by
// CommentInfo.Validate if the designated constraints aren't met.
type CommentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentInfoValidationError) ErrorName() string { return "CommentInfoValidationError" }

// Error satisfies the builtin error interface
func (e CommentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentInfoValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}
