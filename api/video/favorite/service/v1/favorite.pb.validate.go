// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/favorite/service/v1/favorite.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DouyinFavoriteActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinFavoriteActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinFavoriteActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinFavoriteActionRequestMultiError, or nil if none found.
func (m *DouyinFavoriteActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinFavoriteActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for VideoId

	// no validation rules for ActionType

	if len(errors) > 0 {
		return DouyinFavoriteActionRequestMultiError(errors)
	}

	return nil
}

// DouyinFavoriteActionRequestMultiError is an error wrapping multiple
// validation errors returned by DouyinFavoriteActionRequest.ValidateAll() if
// the designated constraints aren't met.
type DouyinFavoriteActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinFavoriteActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinFavoriteActionRequestMultiError) AllErrors() []error { return m }

// DouyinFavoriteActionRequestValidationError is the validation error returned
// by DouyinFavoriteActionRequest.Validate if the designated constraints
// aren't met.
type DouyinFavoriteActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinFavoriteActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinFavoriteActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinFavoriteActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinFavoriteActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinFavoriteActionRequestValidationError) ErrorName() string {
	return "DouyinFavoriteActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinFavoriteActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinFavoriteActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinFavoriteActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinFavoriteActionRequestValidationError{}

// Validate checks the field values on DouyinFavoriteActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinFavoriteActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinFavoriteActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinFavoriteActionResponseMultiError, or nil if none found.
func (m *DouyinFavoriteActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinFavoriteActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return DouyinFavoriteActionResponseMultiError(errors)
	}

	return nil
}

// DouyinFavoriteActionResponseMultiError is an error wrapping multiple
// validation errors returned by DouyinFavoriteActionResponse.ValidateAll() if
// the designated constraints aren't met.
type DouyinFavoriteActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinFavoriteActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinFavoriteActionResponseMultiError) AllErrors() []error { return m }

// DouyinFavoriteActionResponseValidationError is the validation error returned
// by DouyinFavoriteActionResponse.Validate if the designated constraints
// aren't met.
type DouyinFavoriteActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinFavoriteActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinFavoriteActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinFavoriteActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinFavoriteActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinFavoriteActionResponseValidationError) ErrorName() string {
	return "DouyinFavoriteActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinFavoriteActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinFavoriteActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinFavoriteActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinFavoriteActionResponseValidationError{}

// Validate checks the field values on GetUserFavoriteListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFavoriteListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFavoriteListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFavoriteListRequestMultiError, or nil if none found.
func (m *GetUserFavoriteListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFavoriteListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserFavoriteListRequestMultiError(errors)
	}

	return nil
}

// GetUserFavoriteListRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserFavoriteListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserFavoriteListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFavoriteListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFavoriteListRequestMultiError) AllErrors() []error { return m }

// GetUserFavoriteListRequestValidationError is the validation error returned
// by GetUserFavoriteListRequest.Validate if the designated constraints aren't met.
type GetUserFavoriteListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFavoriteListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFavoriteListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFavoriteListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFavoriteListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFavoriteListRequestValidationError) ErrorName() string {
	return "GetUserFavoriteListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFavoriteListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFavoriteListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFavoriteListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFavoriteListRequestValidationError{}

// Validate checks the field values on GetUserFavoriteListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserFavoriteListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserFavoriteListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserFavoriteListResponseMultiError, or nil if none found.
func (m *GetUserFavoriteListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserFavoriteListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetUserFavoriteListResponseMultiError(errors)
	}

	return nil
}

// GetUserFavoriteListResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserFavoriteListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserFavoriteListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserFavoriteListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserFavoriteListResponseMultiError) AllErrors() []error { return m }

// GetUserFavoriteListResponseValidationError is the validation error returned
// by GetUserFavoriteListResponse.Validate if the designated constraints
// aren't met.
type GetUserFavoriteListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserFavoriteListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserFavoriteListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserFavoriteListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserFavoriteListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserFavoriteListResponseValidationError) ErrorName() string {
	return "GetUserFavoriteListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserFavoriteListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserFavoriteListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserFavoriteListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserFavoriteListResponseValidationError{}

// Validate checks the field values on
// GetFavoriteStatusByUserIdAndVideoIdsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFavoriteStatusByUserIdAndVideoIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetFavoriteStatusByUserIdAndVideoIdsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetFavoriteStatusByUserIdAndVideoIdsRequestMultiError, or nil if none found.
func (m *GetFavoriteStatusByUserIdAndVideoIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoriteStatusByUserIdAndVideoIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFavoriteStatusByUserIdAndVideoIdsRequestMultiError(errors)
	}

	return nil
}

// GetFavoriteStatusByUserIdAndVideoIdsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetFavoriteStatusByUserIdAndVideoIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFavoriteStatusByUserIdAndVideoIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoriteStatusByUserIdAndVideoIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoriteStatusByUserIdAndVideoIdsRequestMultiError) AllErrors() []error { return m }

// GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError is the validation
// error returned by GetFavoriteStatusByUserIdAndVideoIdsRequest.Validate if
// the designated constraints aren't met.
type GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError) ErrorName() string {
	return "GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoriteStatusByUserIdAndVideoIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoriteStatusByUserIdAndVideoIdsRequestValidationError{}

// Validate checks the field values on
// GetFavoriteStatusByUserIdAndVideoIdsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFavoriteStatusByUserIdAndVideoIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetFavoriteStatusByUserIdAndVideoIdsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetFavoriteStatusByUserIdAndVideoIdsResponseMultiError, or nil if none found.
func (m *GetFavoriteStatusByUserIdAndVideoIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoriteStatusByUserIdAndVideoIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetFavoriteStatusByUserIdAndVideoIdsResponseMultiError(errors)
	}

	return nil
}

// GetFavoriteStatusByUserIdAndVideoIdsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetFavoriteStatusByUserIdAndVideoIdsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetFavoriteStatusByUserIdAndVideoIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoriteStatusByUserIdAndVideoIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoriteStatusByUserIdAndVideoIdsResponseMultiError) AllErrors() []error { return m }

// GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError is the
// validation error returned by
// GetFavoriteStatusByUserIdAndVideoIdsResponse.Validate if the designated
// constraints aren't met.
type GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError) ErrorName() string {
	return "GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoriteStatusByUserIdAndVideoIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoriteStatusByUserIdAndVideoIdsResponseValidationError{}

// Validate checks the field values on CountUserFavoriteByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CountUserFavoriteByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserFavoriteByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CountUserFavoriteByUserIdRequestMultiError, or nil if none found.
func (m *CountUserFavoriteByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserFavoriteByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CountUserFavoriteByUserIdRequestMultiError(errors)
	}

	return nil
}

// CountUserFavoriteByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// CountUserFavoriteByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type CountUserFavoriteByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserFavoriteByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserFavoriteByUserIdRequestMultiError) AllErrors() []error { return m }

// CountUserFavoriteByUserIdRequestValidationError is the validation error
// returned by CountUserFavoriteByUserIdRequest.Validate if the designated
// constraints aren't met.
type CountUserFavoriteByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserFavoriteByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserFavoriteByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserFavoriteByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserFavoriteByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserFavoriteByUserIdRequestValidationError) ErrorName() string {
	return "CountUserFavoriteByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserFavoriteByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserFavoriteByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserFavoriteByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserFavoriteByUserIdRequestValidationError{}

// Validate checks the field values on CountUserFavoriteByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CountUserFavoriteByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserFavoriteByUserIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CountUserFavoriteByUserIdResponseMultiError, or nil if none found.
func (m *CountUserFavoriteByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserFavoriteByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Count

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return CountUserFavoriteByUserIdResponseMultiError(errors)
	}

	return nil
}

// CountUserFavoriteByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// CountUserFavoriteByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type CountUserFavoriteByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserFavoriteByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserFavoriteByUserIdResponseMultiError) AllErrors() []error { return m }

// CountUserFavoriteByUserIdResponseValidationError is the validation error
// returned by CountUserFavoriteByUserIdResponse.Validate if the designated
// constraints aren't met.
type CountUserFavoriteByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserFavoriteByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserFavoriteByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserFavoriteByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserFavoriteByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserFavoriteByUserIdResponseValidationError) ErrorName() string {
	return "CountUserFavoriteByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserFavoriteByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserFavoriteByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserFavoriteByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserFavoriteByUserIdResponseValidationError{}

// Validate checks the field values on CountUserFavoritedByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CountUserFavoritedByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserFavoritedByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CountUserFavoritedByUserIdRequestMultiError, or nil if none found.
func (m *CountUserFavoritedByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserFavoritedByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CountUserFavoritedByUserIdRequestMultiError(errors)
	}

	return nil
}

// CountUserFavoritedByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// CountUserFavoritedByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type CountUserFavoritedByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserFavoritedByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserFavoritedByUserIdRequestMultiError) AllErrors() []error { return m }

// CountUserFavoritedByUserIdRequestValidationError is the validation error
// returned by CountUserFavoritedByUserIdRequest.Validate if the designated
// constraints aren't met.
type CountUserFavoritedByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserFavoritedByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserFavoritedByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserFavoritedByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserFavoritedByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserFavoritedByUserIdRequestValidationError) ErrorName() string {
	return "CountUserFavoritedByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserFavoritedByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserFavoritedByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserFavoritedByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserFavoritedByUserIdRequestValidationError{}

// Validate checks the field values on CountUserFavoritedByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CountUserFavoritedByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserFavoritedByUserIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CountUserFavoritedByUserIdResponseMultiError, or nil if none found.
func (m *CountUserFavoritedByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserFavoritedByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Count

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return CountUserFavoritedByUserIdResponseMultiError(errors)
	}

	return nil
}

// CountUserFavoritedByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// CountUserFavoritedByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type CountUserFavoritedByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserFavoritedByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserFavoritedByUserIdResponseMultiError) AllErrors() []error { return m }

// CountUserFavoritedByUserIdResponseValidationError is the validation error
// returned by CountUserFavoritedByUserIdResponse.Validate if the designated
// constraints aren't met.
type CountUserFavoritedByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserFavoritedByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserFavoritedByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserFavoritedByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserFavoritedByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserFavoritedByUserIdResponseValidationError) ErrorName() string {
	return "CountUserFavoritedByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserFavoritedByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserFavoritedByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserFavoritedByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserFavoritedByUserIdResponseValidationError{}

// Validate checks the field values on CountVideoFavoritedByVideoIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CountVideoFavoritedByVideoIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountVideoFavoritedByVideoIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CountVideoFavoritedByVideoIdRequestMultiError, or nil if none found.
func (m *CountVideoFavoritedByVideoIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountVideoFavoritedByVideoIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return CountVideoFavoritedByVideoIdRequestMultiError(errors)
	}

	return nil
}

// CountVideoFavoritedByVideoIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// CountVideoFavoritedByVideoIdRequest.ValidateAll() if the designated
// constraints aren't met.
type CountVideoFavoritedByVideoIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountVideoFavoritedByVideoIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountVideoFavoritedByVideoIdRequestMultiError) AllErrors() []error { return m }

// CountVideoFavoritedByVideoIdRequestValidationError is the validation error
// returned by CountVideoFavoritedByVideoIdRequest.Validate if the designated
// constraints aren't met.
type CountVideoFavoritedByVideoIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountVideoFavoritedByVideoIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountVideoFavoritedByVideoIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountVideoFavoritedByVideoIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountVideoFavoritedByVideoIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountVideoFavoritedByVideoIdRequestValidationError) ErrorName() string {
	return "CountVideoFavoritedByVideoIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountVideoFavoritedByVideoIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountVideoFavoritedByVideoIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountVideoFavoritedByVideoIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountVideoFavoritedByVideoIdRequestValidationError{}

// Validate checks the field values on CountVideoFavoritedByVideoIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CountVideoFavoritedByVideoIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountVideoFavoritedByVideoIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CountVideoFavoritedByVideoIdResponseMultiError, or nil if none found.
func (m *CountVideoFavoritedByVideoIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountVideoFavoritedByVideoIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Count

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return CountVideoFavoritedByVideoIdResponseMultiError(errors)
	}

	return nil
}

// CountVideoFavoritedByVideoIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// CountVideoFavoritedByVideoIdResponse.ValidateAll() if the designated
// constraints aren't met.
type CountVideoFavoritedByVideoIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountVideoFavoritedByVideoIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountVideoFavoritedByVideoIdResponseMultiError) AllErrors() []error { return m }

// CountVideoFavoritedByVideoIdResponseValidationError is the validation error
// returned by CountVideoFavoritedByVideoIdResponse.Validate if the designated
// constraints aren't met.
type CountVideoFavoritedByVideoIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountVideoFavoritedByVideoIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountVideoFavoritedByVideoIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountVideoFavoritedByVideoIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountVideoFavoritedByVideoIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountVideoFavoritedByVideoIdResponseValidationError) ErrorName() string {
	return "CountVideoFavoritedByVideoIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountVideoFavoritedByVideoIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountVideoFavoritedByVideoIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountVideoFavoritedByVideoIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountVideoFavoritedByVideoIdResponseValidationError{}

// Validate checks the field values on MCountVideoFavoritedByVideoIdsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MCountVideoFavoritedByVideoIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MCountVideoFavoritedByVideoIdsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MCountVideoFavoritedByVideoIdsRequestMultiError, or nil if none found.
func (m *MCountVideoFavoritedByVideoIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MCountVideoFavoritedByVideoIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MCountVideoFavoritedByVideoIdsRequestMultiError(errors)
	}

	return nil
}

// MCountVideoFavoritedByVideoIdsRequestMultiError is an error wrapping
// multiple validation errors returned by
// MCountVideoFavoritedByVideoIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type MCountVideoFavoritedByVideoIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MCountVideoFavoritedByVideoIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MCountVideoFavoritedByVideoIdsRequestMultiError) AllErrors() []error { return m }

// MCountVideoFavoritedByVideoIdsRequestValidationError is the validation error
// returned by MCountVideoFavoritedByVideoIdsRequest.Validate if the
// designated constraints aren't met.
type MCountVideoFavoritedByVideoIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MCountVideoFavoritedByVideoIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MCountVideoFavoritedByVideoIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MCountVideoFavoritedByVideoIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MCountVideoFavoritedByVideoIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MCountVideoFavoritedByVideoIdsRequestValidationError) ErrorName() string {
	return "MCountVideoFavoritedByVideoIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MCountVideoFavoritedByVideoIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMCountVideoFavoritedByVideoIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MCountVideoFavoritedByVideoIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MCountVideoFavoritedByVideoIdsRequestValidationError{}

// Validate checks the field values on MCountVideoFavoritedByVideoIdsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MCountVideoFavoritedByVideoIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// MCountVideoFavoritedByVideoIdsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// MCountVideoFavoritedByVideoIdsResponseMultiError, or nil if none found.
func (m *MCountVideoFavoritedByVideoIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MCountVideoFavoritedByVideoIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return MCountVideoFavoritedByVideoIdsResponseMultiError(errors)
	}

	return nil
}

// MCountVideoFavoritedByVideoIdsResponseMultiError is an error wrapping
// multiple validation errors returned by
// MCountVideoFavoritedByVideoIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type MCountVideoFavoritedByVideoIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MCountVideoFavoritedByVideoIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MCountVideoFavoritedByVideoIdsResponseMultiError) AllErrors() []error { return m }

// MCountVideoFavoritedByVideoIdsResponseValidationError is the validation
// error returned by MCountVideoFavoritedByVideoIdsResponse.Validate if the
// designated constraints aren't met.
type MCountVideoFavoritedByVideoIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MCountVideoFavoritedByVideoIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MCountVideoFavoritedByVideoIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MCountVideoFavoritedByVideoIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MCountVideoFavoritedByVideoIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MCountVideoFavoritedByVideoIdsResponseValidationError) ErrorName() string {
	return "MCountVideoFavoritedByVideoIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MCountVideoFavoritedByVideoIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMCountVideoFavoritedByVideoIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MCountVideoFavoritedByVideoIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MCountVideoFavoritedByVideoIdsResponseValidationError{}
