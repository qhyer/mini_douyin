// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video/publish/service/v1/publish.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PublishActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishActionRequestMultiError, or nil if none found.
func (m *PublishActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Data

	// no validation rules for Title

	if len(errors) > 0 {
		return PublishActionRequestMultiError(errors)
	}

	return nil
}

// PublishActionRequestMultiError is an error wrapping multiple validation
// errors returned by PublishActionRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishActionRequestMultiError) AllErrors() []error { return m }

// PublishActionRequestValidationError is the validation error returned by
// PublishActionRequest.Validate if the designated constraints aren't met.
type PublishActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishActionRequestValidationError) ErrorName() string {
	return "PublishActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishActionRequestValidationError{}

// Validate checks the field values on PublishActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishActionResponseMultiError, or nil if none found.
func (m *PublishActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return PublishActionResponseMultiError(errors)
	}

	return nil
}

// PublishActionResponseMultiError is an error wrapping multiple validation
// errors returned by PublishActionResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishActionResponseMultiError) AllErrors() []error { return m }

// PublishActionResponseValidationError is the validation error returned by
// PublishActionResponse.Validate if the designated constraints aren't met.
type PublishActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishActionResponseValidationError) ErrorName() string {
	return "PublishActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishActionResponseValidationError{}

// Validate checks the field values on GetUserPublishedVideoListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserPublishedVideoListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPublishedVideoListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserPublishedVideoListRequestMultiError, or nil if none found.
func (m *GetUserPublishedVideoListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPublishedVideoListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserPublishedVideoListRequestMultiError(errors)
	}

	return nil
}

// GetUserPublishedVideoListRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserPublishedVideoListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserPublishedVideoListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPublishedVideoListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPublishedVideoListRequestMultiError) AllErrors() []error { return m }

// GetUserPublishedVideoListRequestValidationError is the validation error
// returned by GetUserPublishedVideoListRequest.Validate if the designated
// constraints aren't met.
type GetUserPublishedVideoListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPublishedVideoListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPublishedVideoListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPublishedVideoListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPublishedVideoListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPublishedVideoListRequestValidationError) ErrorName() string {
	return "GetUserPublishedVideoListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPublishedVideoListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPublishedVideoListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPublishedVideoListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPublishedVideoListRequestValidationError{}

// Validate checks the field values on GetUserPublishedVideoListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserPublishedVideoListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPublishedVideoListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserPublishedVideoListResponseMultiError, or nil if none found.
func (m *GetUserPublishedVideoListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPublishedVideoListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPublishedVideoListResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPublishedVideoListResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPublishedVideoListResponseValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetUserPublishedVideoListResponseMultiError(errors)
	}

	return nil
}

// GetUserPublishedVideoListResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserPublishedVideoListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserPublishedVideoListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPublishedVideoListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPublishedVideoListResponseMultiError) AllErrors() []error { return m }

// GetUserPublishedVideoListResponseValidationError is the validation error
// returned by GetUserPublishedVideoListResponse.Validate if the designated
// constraints aren't met.
type GetUserPublishedVideoListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPublishedVideoListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPublishedVideoListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPublishedVideoListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPublishedVideoListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPublishedVideoListResponseValidationError) ErrorName() string {
	return "GetUserPublishedVideoListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPublishedVideoListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPublishedVideoListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPublishedVideoListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPublishedVideoListResponseValidationError{}

// Validate checks the field values on GetPublishedVideoByLatestTimeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPublishedVideoByLatestTimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishedVideoByLatestTimeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublishedVideoByLatestTimeRequestMultiError, or nil if none found.
func (m *GetPublishedVideoByLatestTimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishedVideoByLatestTimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LatestTime

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetPublishedVideoByLatestTimeRequestMultiError(errors)
	}

	return nil
}

// GetPublishedVideoByLatestTimeRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPublishedVideoByLatestTimeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublishedVideoByLatestTimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishedVideoByLatestTimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishedVideoByLatestTimeRequestMultiError) AllErrors() []error { return m }

// GetPublishedVideoByLatestTimeRequestValidationError is the validation error
// returned by GetPublishedVideoByLatestTimeRequest.Validate if the designated
// constraints aren't met.
type GetPublishedVideoByLatestTimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishedVideoByLatestTimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishedVideoByLatestTimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishedVideoByLatestTimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishedVideoByLatestTimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishedVideoByLatestTimeRequestValidationError) ErrorName() string {
	return "GetPublishedVideoByLatestTimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishedVideoByLatestTimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishedVideoByLatestTimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishedVideoByLatestTimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishedVideoByLatestTimeRequestValidationError{}

// Validate checks the field values on GetPublishedVideoByLatestTimeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPublishedVideoByLatestTimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishedVideoByLatestTimeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublishedVideoByLatestTimeResponseMultiError, or nil if none found.
func (m *GetPublishedVideoByLatestTimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishedVideoByLatestTimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPublishedVideoByLatestTimeResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPublishedVideoByLatestTimeResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPublishedVideoByLatestTimeResponseValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetPublishedVideoByLatestTimeResponseMultiError(errors)
	}

	return nil
}

// GetPublishedVideoByLatestTimeResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPublishedVideoByLatestTimeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublishedVideoByLatestTimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishedVideoByLatestTimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishedVideoByLatestTimeResponseMultiError) AllErrors() []error { return m }

// GetPublishedVideoByLatestTimeResponseValidationError is the validation error
// returned by GetPublishedVideoByLatestTimeResponse.Validate if the
// designated constraints aren't met.
type GetPublishedVideoByLatestTimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishedVideoByLatestTimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishedVideoByLatestTimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishedVideoByLatestTimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishedVideoByLatestTimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishedVideoByLatestTimeResponseValidationError) ErrorName() string {
	return "GetPublishedVideoByLatestTimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishedVideoByLatestTimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishedVideoByLatestTimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishedVideoByLatestTimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishedVideoByLatestTimeResponseValidationError{}

// Validate checks the field values on GetVideoInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVideoInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoInfoRequestMultiError, or nil if none found.
func (m *GetVideoInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	if len(errors) > 0 {
		return GetVideoInfoRequestMultiError(errors)
	}

	return nil
}

// GetVideoInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetVideoInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVideoInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoInfoRequestMultiError) AllErrors() []error { return m }

// GetVideoInfoRequestValidationError is the validation error returned by
// GetVideoInfoRequest.Validate if the designated constraints aren't met.
type GetVideoInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoInfoRequestValidationError) ErrorName() string {
	return "GetVideoInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideoInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoInfoRequestValidationError{}

// Validate checks the field values on GetVideoInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVideoInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoInfoResponseMultiError, or nil if none found.
func (m *GetVideoInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if all {
		switch v := interface{}(m.GetVideoList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVideoInfoResponseValidationError{
					field:  "VideoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVideoInfoResponseValidationError{
					field:  "VideoList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideoList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVideoInfoResponseValidationError{
				field:  "VideoList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetVideoInfoResponseMultiError(errors)
	}

	return nil
}

// GetVideoInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetVideoInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVideoInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoInfoResponseMultiError) AllErrors() []error { return m }

// GetVideoInfoResponseValidationError is the validation error returned by
// GetVideoInfoResponse.Validate if the designated constraints aren't met.
type GetVideoInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoInfoResponseValidationError) ErrorName() string {
	return "GetVideoInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideoInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoInfoResponseValidationError{}

// Validate checks the field values on MGetVideoInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MGetVideoInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MGetVideoInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MGetVideoInfoRequestMultiError, or nil if none found.
func (m *MGetVideoInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MGetVideoInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MGetVideoInfoRequestMultiError(errors)
	}

	return nil
}

// MGetVideoInfoRequestMultiError is an error wrapping multiple validation
// errors returned by MGetVideoInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type MGetVideoInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MGetVideoInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MGetVideoInfoRequestMultiError) AllErrors() []error { return m }

// MGetVideoInfoRequestValidationError is the validation error returned by
// MGetVideoInfoRequest.Validate if the designated constraints aren't met.
type MGetVideoInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MGetVideoInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MGetVideoInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MGetVideoInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MGetVideoInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MGetVideoInfoRequestValidationError) ErrorName() string {
	return "MGetVideoInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MGetVideoInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMGetVideoInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MGetVideoInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MGetVideoInfoRequestValidationError{}

// Validate checks the field values on MGetVideoInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MGetVideoInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MGetVideoInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MGetVideoInfoResponseMultiError, or nil if none found.
func (m *MGetVideoInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MGetVideoInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MGetVideoInfoResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MGetVideoInfoResponseValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MGetVideoInfoResponseValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return MGetVideoInfoResponseMultiError(errors)
	}

	return nil
}

// MGetVideoInfoResponseMultiError is an error wrapping multiple validation
// errors returned by MGetVideoInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type MGetVideoInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MGetVideoInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MGetVideoInfoResponseMultiError) AllErrors() []error { return m }

// MGetVideoInfoResponseValidationError is the validation error returned by
// MGetVideoInfoResponse.Validate if the designated constraints aren't met.
type MGetVideoInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MGetVideoInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MGetVideoInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MGetVideoInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MGetVideoInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MGetVideoInfoResponseValidationError) ErrorName() string {
	return "MGetVideoInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MGetVideoInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMGetVideoInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MGetVideoInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MGetVideoInfoResponseValidationError{}

// Validate checks the field values on CountUserPublishedVideoByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CountUserPublishedVideoByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CountUserPublishedVideoByUserIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CountUserPublishedVideoByUserIdRequestMultiError, or nil if none found.
func (m *CountUserPublishedVideoByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserPublishedVideoByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CountUserPublishedVideoByUserIdRequestMultiError(errors)
	}

	return nil
}

// CountUserPublishedVideoByUserIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// CountUserPublishedVideoByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type CountUserPublishedVideoByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserPublishedVideoByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserPublishedVideoByUserIdRequestMultiError) AllErrors() []error { return m }

// CountUserPublishedVideoByUserIdRequestValidationError is the validation
// error returned by CountUserPublishedVideoByUserIdRequest.Validate if the
// designated constraints aren't met.
type CountUserPublishedVideoByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserPublishedVideoByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserPublishedVideoByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserPublishedVideoByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserPublishedVideoByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserPublishedVideoByUserIdRequestValidationError) ErrorName() string {
	return "CountUserPublishedVideoByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserPublishedVideoByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserPublishedVideoByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserPublishedVideoByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserPublishedVideoByUserIdRequestValidationError{}

// Validate checks the field values on CountUserPublishedVideoByUserIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CountUserPublishedVideoByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CountUserPublishedVideoByUserIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CountUserPublishedVideoByUserIdResponseMultiError, or nil if none found.
func (m *CountUserPublishedVideoByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserPublishedVideoByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Count

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return CountUserPublishedVideoByUserIdResponseMultiError(errors)
	}

	return nil
}

// CountUserPublishedVideoByUserIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// CountUserPublishedVideoByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type CountUserPublishedVideoByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserPublishedVideoByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserPublishedVideoByUserIdResponseMultiError) AllErrors() []error { return m }

// CountUserPublishedVideoByUserIdResponseValidationError is the validation
// error returned by CountUserPublishedVideoByUserIdResponse.Validate if the
// designated constraints aren't met.
type CountUserPublishedVideoByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserPublishedVideoByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserPublishedVideoByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserPublishedVideoByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserPublishedVideoByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserPublishedVideoByUserIdResponseValidationError) ErrorName() string {
	return "CountUserPublishedVideoByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserPublishedVideoByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserPublishedVideoByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserPublishedVideoByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserPublishedVideoByUserIdResponseValidationError{}

// Validate checks the field values on VideoInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoInfoMultiError, or nil
// if none found.
func (m *VideoInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AuthorId

	// no validation rules for Title

	// no validation rules for CoverUrl

	// no validation rules for PlayUrl

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return VideoInfoMultiError(errors)
	}

	return nil
}

// VideoInfoMultiError is an error wrapping multiple validation errors returned
// by VideoInfo.ValidateAll() if the designated constraints aren't met.
type VideoInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoInfoMultiError) AllErrors() []error { return m }

// VideoInfoValidationError is the validation error returned by
// VideoInfo.Validate if the designated constraints aren't met.
type VideoInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoInfoValidationError) ErrorName() string { return "VideoInfoValidationError" }

// Error satisfies the builtin error interface
func (e VideoInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoInfoValidationError{}
