// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/relation/service/v1/relation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RelationActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationActionRequestMultiError, or nil if none found.
func (m *RelationActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	// no validation rules for ActionType

	if len(errors) > 0 {
		return RelationActionRequestMultiError(errors)
	}

	return nil
}

// RelationActionRequestMultiError is an error wrapping multiple validation
// errors returned by RelationActionRequest.ValidateAll() if the designated
// constraints aren't met.
type RelationActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationActionRequestMultiError) AllErrors() []error { return m }

// RelationActionRequestValidationError is the validation error returned by
// RelationActionRequest.Validate if the designated constraints aren't met.
type RelationActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationActionRequestValidationError) ErrorName() string {
	return "RelationActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationActionRequestValidationError{}

// Validate checks the field values on RelationActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationActionResponseMultiError, or nil if none found.
func (m *RelationActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return RelationActionResponseMultiError(errors)
	}

	return nil
}

// RelationActionResponseMultiError is an error wrapping multiple validation
// errors returned by RelationActionResponse.ValidateAll() if the designated
// constraints aren't met.
type RelationActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationActionResponseMultiError) AllErrors() []error { return m }

// RelationActionResponseValidationError is the validation error returned by
// RelationActionResponse.Validate if the designated constraints aren't met.
type RelationActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationActionResponseValidationError) ErrorName() string {
	return "RelationActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RelationActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationActionResponseValidationError{}

// Validate checks the field values on GetFollowListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowListByUserIdRequestMultiError, or nil if none found.
func (m *GetFollowListByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFollowListByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetFollowListByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFollowListByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFollowListByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListByUserIdRequestMultiError) AllErrors() []error { return m }

// GetFollowListByUserIdRequestValidationError is the validation error returned
// by GetFollowListByUserIdRequest.Validate if the designated constraints
// aren't met.
type GetFollowListByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListByUserIdRequestValidationError) ErrorName() string {
	return "GetFollowListByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListByUserIdRequestValidationError{}

// Validate checks the field values on GetFollowListByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFollowListByUserIdResponseMultiError, or nil if none found.
func (m *GetFollowListByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetFollowListByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetFollowListByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetFollowListByUserIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetFollowListByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListByUserIdResponseMultiError) AllErrors() []error { return m }

// GetFollowListByUserIdResponseValidationError is the validation error
// returned by GetFollowListByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetFollowListByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListByUserIdResponseValidationError) ErrorName() string {
	return "GetFollowListByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListByUserIdResponseValidationError{}

// Validate checks the field values on GetFollowerListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFollowerListByUserIdRequestMultiError, or nil if none found.
func (m *GetFollowerListByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFollowerListByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetFollowerListByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFollowerListByUserIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetFollowerListByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListByUserIdRequestMultiError) AllErrors() []error { return m }

// GetFollowerListByUserIdRequestValidationError is the validation error
// returned by GetFollowerListByUserIdRequest.Validate if the designated
// constraints aren't met.
type GetFollowerListByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListByUserIdRequestValidationError) ErrorName() string {
	return "GetFollowerListByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListByUserIdRequestValidationError{}

// Validate checks the field values on GetFollowerListByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFollowerListByUserIdResponseMultiError, or nil if none found.
func (m *GetFollowerListByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetFollowerListByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetFollowerListByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetFollowerListByUserIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetFollowerListByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListByUserIdResponseMultiError) AllErrors() []error { return m }

// GetFollowerListByUserIdResponseValidationError is the validation error
// returned by GetFollowerListByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetFollowerListByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListByUserIdResponseValidationError) ErrorName() string {
	return "GetFollowerListByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListByUserIdResponseValidationError{}

// Validate checks the field values on GetFriendListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListByUserIdRequestMultiError, or nil if none found.
func (m *GetFriendListByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetFriendListByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetFriendListByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFriendListByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFriendListByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListByUserIdRequestMultiError) AllErrors() []error { return m }

// GetFriendListByUserIdRequestValidationError is the validation error returned
// by GetFriendListByUserIdRequest.Validate if the designated constraints
// aren't met.
type GetFriendListByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListByUserIdRequestValidationError) ErrorName() string {
	return "GetFriendListByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListByUserIdRequestValidationError{}

// Validate checks the field values on GetFriendListByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFriendListByUserIdResponseMultiError, or nil if none found.
func (m *GetFriendListByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetFriendListByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetFriendListByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetFriendListByUserIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetFriendListByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListByUserIdResponseMultiError) AllErrors() []error { return m }

// GetFriendListByUserIdResponseValidationError is the validation error
// returned by GetFriendListByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetFriendListByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListByUserIdResponseValidationError) ErrorName() string {
	return "GetFriendListByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListByUserIdResponseValidationError{}

// Validate checks the field values on CountFollowByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountFollowByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountFollowByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountFollowByUserIdRequestMultiError, or nil if none found.
func (m *CountFollowByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountFollowByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CountFollowByUserIdRequestMultiError(errors)
	}

	return nil
}

// CountFollowByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by CountFollowByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type CountFollowByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountFollowByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountFollowByUserIdRequestMultiError) AllErrors() []error { return m }

// CountFollowByUserIdRequestValidationError is the validation error returned
// by CountFollowByUserIdRequest.Validate if the designated constraints aren't met.
type CountFollowByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountFollowByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountFollowByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountFollowByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountFollowByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountFollowByUserIdRequestValidationError) ErrorName() string {
	return "CountFollowByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountFollowByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountFollowByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountFollowByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountFollowByUserIdRequestValidationError{}

// Validate checks the field values on CountFollowByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountFollowByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountFollowByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountFollowByUserIdResponseMultiError, or nil if none found.
func (m *CountFollowByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountFollowByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Count

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return CountFollowByUserIdResponseMultiError(errors)
	}

	return nil
}

// CountFollowByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by CountFollowByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type CountFollowByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountFollowByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountFollowByUserIdResponseMultiError) AllErrors() []error { return m }

// CountFollowByUserIdResponseValidationError is the validation error returned
// by CountFollowByUserIdResponse.Validate if the designated constraints
// aren't met.
type CountFollowByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountFollowByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountFollowByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountFollowByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountFollowByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountFollowByUserIdResponseValidationError) ErrorName() string {
	return "CountFollowByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountFollowByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountFollowByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountFollowByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountFollowByUserIdResponseValidationError{}

// Validate checks the field values on CountFollowerByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountFollowerByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountFollowerByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountFollowerByUserIdRequestMultiError, or nil if none found.
func (m *CountFollowerByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountFollowerByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return CountFollowerByUserIdRequestMultiError(errors)
	}

	return nil
}

// CountFollowerByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by CountFollowerByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type CountFollowerByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountFollowerByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountFollowerByUserIdRequestMultiError) AllErrors() []error { return m }

// CountFollowerByUserIdRequestValidationError is the validation error returned
// by CountFollowerByUserIdRequest.Validate if the designated constraints
// aren't met.
type CountFollowerByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountFollowerByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountFollowerByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountFollowerByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountFollowerByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountFollowerByUserIdRequestValidationError) ErrorName() string {
	return "CountFollowerByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountFollowerByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountFollowerByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountFollowerByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountFollowerByUserIdRequestValidationError{}

// Validate checks the field values on CountFollowerByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountFollowerByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountFollowerByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CountFollowerByUserIdResponseMultiError, or nil if none found.
func (m *CountFollowerByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountFollowerByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Count

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return CountFollowerByUserIdResponseMultiError(errors)
	}

	return nil
}

// CountFollowerByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by CountFollowerByUserIdResponse.ValidateAll()
// if the designated constraints aren't met.
type CountFollowerByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountFollowerByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountFollowerByUserIdResponseMultiError) AllErrors() []error { return m }

// CountFollowerByUserIdResponseValidationError is the validation error
// returned by CountFollowerByUserIdResponse.Validate if the designated
// constraints aren't met.
type CountFollowerByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountFollowerByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountFollowerByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountFollowerByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountFollowerByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountFollowerByUserIdResponseValidationError) ErrorName() string {
	return "CountFollowerByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountFollowerByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountFollowerByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountFollowerByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountFollowerByUserIdResponseValidationError{}

// Validate checks the field values on IsFollowByUserIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsFollowByUserIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFollowByUserIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsFollowByUserIdsRequestMultiError, or nil if none found.
func (m *IsFollowByUserIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFollowByUserIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return IsFollowByUserIdsRequestMultiError(errors)
	}

	return nil
}

// IsFollowByUserIdsRequestMultiError is an error wrapping multiple validation
// errors returned by IsFollowByUserIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type IsFollowByUserIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFollowByUserIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFollowByUserIdsRequestMultiError) AllErrors() []error { return m }

// IsFollowByUserIdsRequestValidationError is the validation error returned by
// IsFollowByUserIdsRequest.Validate if the designated constraints aren't met.
type IsFollowByUserIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFollowByUserIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFollowByUserIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFollowByUserIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFollowByUserIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFollowByUserIdsRequestValidationError) ErrorName() string {
	return "IsFollowByUserIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsFollowByUserIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFollowByUserIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFollowByUserIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFollowByUserIdsRequestValidationError{}

// Validate checks the field values on IsFollowByUserIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsFollowByUserIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFollowByUserIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsFollowByUserIdsResponseMultiError, or nil if none found.
func (m *IsFollowByUserIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFollowByUserIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return IsFollowByUserIdsResponseMultiError(errors)
	}

	return nil
}

// IsFollowByUserIdsResponseMultiError is an error wrapping multiple validation
// errors returned by IsFollowByUserIdsResponse.ValidateAll() if the
// designated constraints aren't met.
type IsFollowByUserIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFollowByUserIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFollowByUserIdsResponseMultiError) AllErrors() []error { return m }

// IsFollowByUserIdsResponseValidationError is the validation error returned by
// IsFollowByUserIdsResponse.Validate if the designated constraints aren't met.
type IsFollowByUserIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFollowByUserIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFollowByUserIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFollowByUserIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFollowByUserIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFollowByUserIdsResponseValidationError) ErrorName() string {
	return "IsFollowByUserIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsFollowByUserIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFollowByUserIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFollowByUserIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFollowByUserIdsResponseValidationError{}

// Validate checks the field values on IsFollowByUserIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsFollowByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFollowByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsFollowByUserIdRequestMultiError, or nil if none found.
func (m *IsFollowByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFollowByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	if len(errors) > 0 {
		return IsFollowByUserIdRequestMultiError(errors)
	}

	return nil
}

// IsFollowByUserIdRequestMultiError is an error wrapping multiple validation
// errors returned by IsFollowByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type IsFollowByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFollowByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFollowByUserIdRequestMultiError) AllErrors() []error { return m }

// IsFollowByUserIdRequestValidationError is the validation error returned by
// IsFollowByUserIdRequest.Validate if the designated constraints aren't met.
type IsFollowByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFollowByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFollowByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFollowByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFollowByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFollowByUserIdRequestValidationError) ErrorName() string {
	return "IsFollowByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsFollowByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFollowByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFollowByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFollowByUserIdRequestValidationError{}

// Validate checks the field values on IsFollowByUserIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsFollowByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFollowByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsFollowByUserIdResponseMultiError, or nil if none found.
func (m *IsFollowByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFollowByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for IsFollow

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return IsFollowByUserIdResponseMultiError(errors)
	}

	return nil
}

// IsFollowByUserIdResponseMultiError is an error wrapping multiple validation
// errors returned by IsFollowByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type IsFollowByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFollowByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFollowByUserIdResponseMultiError) AllErrors() []error { return m }

// IsFollowByUserIdResponseValidationError is the validation error returned by
// IsFollowByUserIdResponse.Validate if the designated constraints aren't met.
type IsFollowByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFollowByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFollowByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFollowByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFollowByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFollowByUserIdResponseValidationError) ErrorName() string {
	return "IsFollowByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsFollowByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFollowByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFollowByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFollowByUserIdResponseValidationError{}
