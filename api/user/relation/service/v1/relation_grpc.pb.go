// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Relation_RelationAction_FullMethodName            = "/api.relation.v1.Relation/RelationAction"
	Relation_GetFollowListByUserId_FullMethodName     = "/api.relation.v1.Relation/GetFollowListByUserId"
	Relation_GetFollowerListByUserId_FullMethodName   = "/api.relation.v1.Relation/GetFollowerListByUserId"
	Relation_GetUserFriendListByUserId_FullMethodName = "/api.relation.v1.Relation/GetUserFriendListByUserId"
	Relation_CountFollowByUserId_FullMethodName       = "/api.relation.v1.Relation/CountFollowByUserId"
	Relation_CountFollowerByUserId_FullMethodName     = "/api.relation.v1.Relation/CountFollowerByUserId"
)

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationClient interface {
	RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
	GetFollowListByUserId(ctx context.Context, in *GetFollowListByUserIdRequest, opts ...grpc.CallOption) (*GetFollowListByUserIdResponse, error)
	GetFollowerListByUserId(ctx context.Context, in *GetFollowerListByUserIdRequest, opts ...grpc.CallOption) (*GetFollowerListByUserIdResponse, error)
	GetUserFriendListByUserId(ctx context.Context, in *GetFriendListByUserIdRequest, opts ...grpc.CallOption) (*GetFriendListByUserIdResponse, error)
	CountFollowByUserId(ctx context.Context, in *CountFollowByUserIdRequest, opts ...grpc.CallOption) (*CountFollowByUserIdResponse, error)
	CountFollowerByUserId(ctx context.Context, in *CountFollowerByUserIdRequest, opts ...grpc.CallOption) (*CountFollowerByUserIdResponse, error)
}

type relationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationClient(cc grpc.ClientConnInterface) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) RelationAction(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	out := new(RelationActionResponse)
	err := c.cc.Invoke(ctx, Relation_RelationAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetFollowListByUserId(ctx context.Context, in *GetFollowListByUserIdRequest, opts ...grpc.CallOption) (*GetFollowListByUserIdResponse, error) {
	out := new(GetFollowListByUserIdResponse)
	err := c.cc.Invoke(ctx, Relation_GetFollowListByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetFollowerListByUserId(ctx context.Context, in *GetFollowerListByUserIdRequest, opts ...grpc.CallOption) (*GetFollowerListByUserIdResponse, error) {
	out := new(GetFollowerListByUserIdResponse)
	err := c.cc.Invoke(ctx, Relation_GetFollowerListByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) GetUserFriendListByUserId(ctx context.Context, in *GetFriendListByUserIdRequest, opts ...grpc.CallOption) (*GetFriendListByUserIdResponse, error) {
	out := new(GetFriendListByUserIdResponse)
	err := c.cc.Invoke(ctx, Relation_GetUserFriendListByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CountFollowByUserId(ctx context.Context, in *CountFollowByUserIdRequest, opts ...grpc.CallOption) (*CountFollowByUserIdResponse, error) {
	out := new(CountFollowByUserIdResponse)
	err := c.cc.Invoke(ctx, Relation_CountFollowByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CountFollowerByUserId(ctx context.Context, in *CountFollowerByUserIdRequest, opts ...grpc.CallOption) (*CountFollowerByUserIdResponse, error) {
	out := new(CountFollowerByUserIdResponse)
	err := c.cc.Invoke(ctx, Relation_CountFollowerByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
// All implementations must embed UnimplementedRelationServer
// for forward compatibility
type RelationServer interface {
	RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error)
	GetFollowListByUserId(context.Context, *GetFollowListByUserIdRequest) (*GetFollowListByUserIdResponse, error)
	GetFollowerListByUserId(context.Context, *GetFollowerListByUserIdRequest) (*GetFollowerListByUserIdResponse, error)
	GetUserFriendListByUserId(context.Context, *GetFriendListByUserIdRequest) (*GetFriendListByUserIdResponse, error)
	CountFollowByUserId(context.Context, *CountFollowByUserIdRequest) (*CountFollowByUserIdResponse, error)
	CountFollowerByUserId(context.Context, *CountFollowerByUserIdRequest) (*CountFollowerByUserIdResponse, error)
	mustEmbedUnimplementedRelationServer()
}

// UnimplementedRelationServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServer struct {
}

func (UnimplementedRelationServer) RelationAction(context.Context, *RelationActionRequest) (*RelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedRelationServer) GetFollowListByUserId(context.Context, *GetFollowListByUserIdRequest) (*GetFollowListByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowListByUserId not implemented")
}
func (UnimplementedRelationServer) GetFollowerListByUserId(context.Context, *GetFollowerListByUserIdRequest) (*GetFollowerListByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerListByUserId not implemented")
}
func (UnimplementedRelationServer) GetUserFriendListByUserId(context.Context, *GetFriendListByUserIdRequest) (*GetFriendListByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFriendListByUserId not implemented")
}
func (UnimplementedRelationServer) CountFollowByUserId(context.Context, *CountFollowByUserIdRequest) (*CountFollowByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFollowByUserId not implemented")
}
func (UnimplementedRelationServer) CountFollowerByUserId(context.Context, *CountFollowerByUserIdRequest) (*CountFollowerByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFollowerByUserId not implemented")
}
func (UnimplementedRelationServer) mustEmbedUnimplementedRelationServer() {}

// UnsafeRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServer will
// result in compilation errors.
type UnsafeRelationServer interface {
	mustEmbedUnimplementedRelationServer()
}

func RegisterRelationServer(s grpc.ServiceRegistrar, srv RelationServer) {
	s.RegisterService(&Relation_ServiceDesc, srv)
}

func _Relation_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_RelationAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).RelationAction(ctx, req.(*RelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetFollowListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowListByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetFollowListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetFollowListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetFollowListByUserId(ctx, req.(*GetFollowListByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetFollowerListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerListByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetFollowerListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetFollowerListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetFollowerListByUserId(ctx, req.(*GetFollowerListByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_GetUserFriendListByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).GetUserFriendListByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_GetUserFriendListByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).GetUserFriendListByUserId(ctx, req.(*GetFriendListByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CountFollowByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFollowByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CountFollowByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_CountFollowByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CountFollowByUserId(ctx, req.(*CountFollowByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CountFollowerByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFollowerByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CountFollowerByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Relation_CountFollowerByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CountFollowerByUserId(ctx, req.(*CountFollowerByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Relation_ServiceDesc is the grpc.ServiceDesc for Relation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Relation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.relation.v1.Relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelationAction",
			Handler:    _Relation_RelationAction_Handler,
		},
		{
			MethodName: "GetFollowListByUserId",
			Handler:    _Relation_GetFollowListByUserId_Handler,
		},
		{
			MethodName: "GetFollowerListByUserId",
			Handler:    _Relation_GetFollowerListByUserId_Handler,
		},
		{
			MethodName: "GetUserFriendListByUserId",
			Handler:    _Relation_GetUserFriendListByUserId_Handler,
		},
		{
			MethodName: "CountFollowByUserId",
			Handler:    _Relation_CountFollowByUserId_Handler,
		},
		{
			MethodName: "CountFollowerByUserId",
			Handler:    _Relation_CountFollowerByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
