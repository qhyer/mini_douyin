// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/chat/service/v1/chat.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestMultiError, or nil
// if none found.
func (m *GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	// no validation rules for PreMsgTime

	if len(errors) > 0 {
		return GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestMultiError(errors)
	}

	return nil
}

// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestMultiError is an
// error wrapping multiple validation errors returned by
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest.ValidateAll() if
// the designated constraints aren't met.
type GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestMultiError) AllErrors() []error {
	return m
}

// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError is
// the validation error returned by
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest.Validate if the
// designated constraints aren't met.
type GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError) ErrorName() string {
	return "GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeRequestValidationError{}

// Validate checks the field values on
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseMultiError, or nil
// if none found.
func (m *GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetMessageList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError{
					field:  fmt.Sprintf("MessageList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseMultiError(errors)
	}

	return nil
}

// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseMultiError is an
// error wrapping multiple validation errors returned by
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseMultiError) AllErrors() []error {
	return m
}

// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError is
// the validation error returned by
// GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse.Validate if the
// designated constraints aren't met.
type GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError) ErrorName() string {
	return "GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageListByMyUserIdAndHisUserIdAndPreMsgTimeResponseValidationError{}

// Validate checks the field values on DouyinChatActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinChatActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinChatActionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinChatActionRequestMultiError, or nil if none found.
func (m *DouyinChatActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinChatActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	// no validation rules for ActionType

	// no validation rules for Content

	if len(errors) > 0 {
		return DouyinChatActionRequestMultiError(errors)
	}

	return nil
}

// DouyinChatActionRequestMultiError is an error wrapping multiple validation
// errors returned by DouyinChatActionRequest.ValidateAll() if the designated
// constraints aren't met.
type DouyinChatActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinChatActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinChatActionRequestMultiError) AllErrors() []error { return m }

// DouyinChatActionRequestValidationError is the validation error returned by
// DouyinChatActionRequest.Validate if the designated constraints aren't met.
type DouyinChatActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinChatActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinChatActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinChatActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinChatActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinChatActionRequestValidationError) ErrorName() string {
	return "DouyinChatActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinChatActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinChatActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinChatActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinChatActionRequestValidationError{}

// Validate checks the field values on DouyinChatActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DouyinChatActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DouyinChatActionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DouyinChatActionResponseMultiError, or nil if none found.
func (m *DouyinChatActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DouyinChatActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return DouyinChatActionResponseMultiError(errors)
	}

	return nil
}

// DouyinChatActionResponseMultiError is an error wrapping multiple validation
// errors returned by DouyinChatActionResponse.ValidateAll() if the designated
// constraints aren't met.
type DouyinChatActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DouyinChatActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DouyinChatActionResponseMultiError) AllErrors() []error { return m }

// DouyinChatActionResponseValidationError is the validation error returned by
// DouyinChatActionResponse.Validate if the designated constraints aren't met.
type DouyinChatActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DouyinChatActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DouyinChatActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DouyinChatActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DouyinChatActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DouyinChatActionResponseValidationError) ErrorName() string {
	return "DouyinChatActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DouyinChatActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDouyinChatActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DouyinChatActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DouyinChatActionResponseValidationError{}

// Validate checks the field values on
// GetLatestMsgByMyUserIdAndHisUserIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLatestMsgByMyUserIdAndHisUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetLatestMsgByMyUserIdAndHisUserIdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetLatestMsgByMyUserIdAndHisUserIdRequestMultiError, or nil if none found.
func (m *GetLatestMsgByMyUserIdAndHisUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestMsgByMyUserIdAndHisUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	if len(errors) > 0 {
		return GetLatestMsgByMyUserIdAndHisUserIdRequestMultiError(errors)
	}

	return nil
}

// GetLatestMsgByMyUserIdAndHisUserIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetLatestMsgByMyUserIdAndHisUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLatestMsgByMyUserIdAndHisUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestMsgByMyUserIdAndHisUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestMsgByMyUserIdAndHisUserIdRequestMultiError) AllErrors() []error { return m }

// GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError is the validation
// error returned by GetLatestMsgByMyUserIdAndHisUserIdRequest.Validate if the
// designated constraints aren't met.
type GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError) ErrorName() string {
	return "GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestMsgByMyUserIdAndHisUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestMsgByMyUserIdAndHisUserIdRequestValidationError{}

// Validate checks the field values on
// GetLatestMsgByMyUserIdAndHisUserIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLatestMsgByMyUserIdAndHisUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetLatestMsgByMyUserIdAndHisUserIdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetLatestMsgByMyUserIdAndHisUserIdResponseMultiError, or nil if none found.
func (m *GetLatestMsgByMyUserIdAndHisUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestMsgByMyUserIdAndHisUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if m.Message != nil {

		if all {
			switch v := interface{}(m.GetMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetLatestMsgByMyUserIdAndHisUserIdResponseMultiError(errors)
	}

	return nil
}

// GetLatestMsgByMyUserIdAndHisUserIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetLatestMsgByMyUserIdAndHisUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLatestMsgByMyUserIdAndHisUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestMsgByMyUserIdAndHisUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestMsgByMyUserIdAndHisUserIdResponseMultiError) AllErrors() []error { return m }

// GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError is the validation
// error returned by GetLatestMsgByMyUserIdAndHisUserIdResponse.Validate if
// the designated constraints aren't met.
type GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError) ErrorName() string {
	return "GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestMsgByMyUserIdAndHisUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestMsgByMyUserIdAndHisUserIdResponseValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ToUserId

	// no validation rules for FromUserId

	// no validation rules for Content

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}
