// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/account/service/v1/account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserInfoByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoByUserIdRequestMultiError, or nil if none found.
func (m *GetUserInfoByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	if len(errors) > 0 {
		return GetUserInfoByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetUserInfoByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserInfoByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserInfoByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoByUserIdRequestMultiError) AllErrors() []error { return m }

// GetUserInfoByUserIdRequestValidationError is the validation error returned
// by GetUserInfoByUserIdRequest.Validate if the designated constraints aren't met.
type GetUserInfoByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoByUserIdRequestValidationError) ErrorName() string {
	return "GetUserInfoByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoByUserIdRequestValidationError{}

// Validate checks the field values on GetUserInfoByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoByUserIdResponseMultiError, or nil if none found.
func (m *GetUserInfoByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserInfoByUserIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserInfoByUserIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInfoByUserIdResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetUserInfoByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetUserInfoByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserInfoByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserInfoByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoByUserIdResponseMultiError) AllErrors() []error { return m }

// GetUserInfoByUserIdResponseValidationError is the validation error returned
// by GetUserInfoByUserIdResponse.Validate if the designated constraints
// aren't met.
type GetUserInfoByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoByUserIdResponseValidationError) ErrorName() string {
	return "GetUserInfoByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoByUserIdResponseValidationError{}

// Validate checks the field values on MGetUserInfoByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MGetUserInfoByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MGetUserInfoByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MGetUserInfoByUserIdRequestMultiError, or nil if none found.
func (m *MGetUserInfoByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MGetUserInfoByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return MGetUserInfoByUserIdRequestMultiError(errors)
	}

	return nil
}

// MGetUserInfoByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by MGetUserInfoByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type MGetUserInfoByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MGetUserInfoByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MGetUserInfoByUserIdRequestMultiError) AllErrors() []error { return m }

// MGetUserInfoByUserIdRequestValidationError is the validation error returned
// by MGetUserInfoByUserIdRequest.Validate if the designated constraints
// aren't met.
type MGetUserInfoByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MGetUserInfoByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MGetUserInfoByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MGetUserInfoByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MGetUserInfoByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MGetUserInfoByUserIdRequestValidationError) ErrorName() string {
	return "MGetUserInfoByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MGetUserInfoByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMGetUserInfoByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MGetUserInfoByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MGetUserInfoByUserIdRequestValidationError{}

// Validate checks the field values on MGetUserInfoByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MGetUserInfoByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MGetUserInfoByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MGetUserInfoByUserIdResponseMultiError, or nil if none found.
func (m *MGetUserInfoByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MGetUserInfoByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MGetUserInfoByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MGetUserInfoByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MGetUserInfoByUserIdResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return MGetUserInfoByUserIdResponseMultiError(errors)
	}

	return nil
}

// MGetUserInfoByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by MGetUserInfoByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type MGetUserInfoByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MGetUserInfoByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MGetUserInfoByUserIdResponseMultiError) AllErrors() []error { return m }

// MGetUserInfoByUserIdResponseValidationError is the validation error returned
// by MGetUserInfoByUserIdResponse.Validate if the designated constraints
// aren't met.
type MGetUserInfoByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MGetUserInfoByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MGetUserInfoByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MGetUserInfoByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MGetUserInfoByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MGetUserInfoByUserIdResponseValidationError) ErrorName() string {
	return "MGetUserInfoByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MGetUserInfoByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMGetUserInfoByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MGetUserInfoByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MGetUserInfoByUserIdResponseValidationError{}

// Validate checks the field values on GetFollowListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowListByUserIdRequestMultiError, or nil if none found.
func (m *GetFollowListByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	if len(errors) > 0 {
		return GetFollowListByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetFollowListByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFollowListByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFollowListByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListByUserIdRequestMultiError) AllErrors() []error { return m }

// GetFollowListByUserIdRequestValidationError is the validation error returned
// by GetFollowListByUserIdRequest.Validate if the designated constraints
// aren't met.
type GetFollowListByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListByUserIdRequestValidationError) ErrorName() string {
	return "GetFollowListByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListByUserIdRequestValidationError{}

// Validate checks the field values on GetFollowListByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFollowListByUserIdResponseMultiError, or nil if none found.
func (m *GetFollowListByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFollowListByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFollowListByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFollowListByUserIdResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetFollowListByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetFollowListByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetFollowListByUserIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetFollowListByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListByUserIdResponseMultiError) AllErrors() []error { return m }

// GetFollowListByUserIdResponseValidationError is the validation error
// returned by GetFollowListByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetFollowListByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListByUserIdResponseValidationError) ErrorName() string {
	return "GetFollowListByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListByUserIdResponseValidationError{}

// Validate checks the field values on GetFollowerListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFollowerListByUserIdRequestMultiError, or nil if none found.
func (m *GetFollowerListByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	if len(errors) > 0 {
		return GetFollowerListByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetFollowerListByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFollowerListByUserIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetFollowerListByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListByUserIdRequestMultiError) AllErrors() []error { return m }

// GetFollowerListByUserIdRequestValidationError is the validation error
// returned by GetFollowerListByUserIdRequest.Validate if the designated
// constraints aren't met.
type GetFollowerListByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListByUserIdRequestValidationError) ErrorName() string {
	return "GetFollowerListByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListByUserIdRequestValidationError{}

// Validate checks the field values on GetFollowerListByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFollowerListByUserIdResponseMultiError, or nil if none found.
func (m *GetFollowerListByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFollowerListByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFollowerListByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFollowerListByUserIdResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetFollowerListByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetFollowerListByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetFollowerListByUserIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetFollowerListByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListByUserIdResponseMultiError) AllErrors() []error { return m }

// GetFollowerListByUserIdResponseValidationError is the validation error
// returned by GetFollowerListByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetFollowerListByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListByUserIdResponseValidationError) ErrorName() string {
	return "GetFollowerListByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListByUserIdResponseValidationError{}

// Validate checks the field values on GetFriendListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListByUserIdRequestMultiError, or nil if none found.
func (m *GetFriendListByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ToUserId

	if len(errors) > 0 {
		return GetFriendListByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetFriendListByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetFriendListByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFriendListByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListByUserIdRequestMultiError) AllErrors() []error { return m }

// GetFriendListByUserIdRequestValidationError is the validation error returned
// by GetFriendListByUserIdRequest.Validate if the designated constraints
// aren't met.
type GetFriendListByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListByUserIdRequestValidationError) ErrorName() string {
	return "GetFriendListByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListByUserIdRequestValidationError{}

// Validate checks the field values on GetFriendListByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFriendListByUserIdResponseMultiError, or nil if none found.
func (m *GetFriendListByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendListByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendListByUserIdResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendListByUserIdResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StatusMsg != nil {
		// no validation rules for StatusMsg
	}

	if len(errors) > 0 {
		return GetFriendListByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetFriendListByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetFriendListByUserIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetFriendListByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListByUserIdResponseMultiError) AllErrors() []error { return m }

// GetFriendListByUserIdResponseValidationError is the validation error
// returned by GetFriendListByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetFriendListByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListByUserIdResponseValidationError) ErrorName() string {
	return "GetFriendListByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListByUserIdResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for IsFollow

	if m.FollowCount != nil {
		// no validation rules for FollowCount
	}

	if m.FollowerCount != nil {
		// no validation rules for FollowerCount
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.BackgroundImage != nil {
		// no validation rules for BackgroundImage
	}

	if m.Signature != nil {
		// no validation rules for Signature
	}

	if m.TotalFavorited != nil {
		// no validation rules for TotalFavorited
	}

	if m.WorkCount != nil {
		// no validation rules for WorkCount
	}

	if m.FavoriteCount != nil {
		// no validation rules for FavoriteCount
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.MsgType != nil {
		// no validation rules for MsgType
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}
