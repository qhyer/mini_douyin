// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bff/bff.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetUserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoRequestMultiError, or nil if none found.
func (m *GetUserInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserInfoRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return GetUserInfoRequestMultiError(errors)
	}

	return nil
}

// GetUserInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoRequestMultiError) AllErrors() []error { return m }

// GetUserInfoRequestValidationError is the validation error returned by
// GetUserInfoRequest.Validate if the designated constraints aren't met.
type GetUserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoRequestValidationError) ErrorName() string {
	return "GetUserInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoRequestValidationError{}

// Validate checks the field values on GetUserInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserInfoReplyMultiError, or nil if none found.
func (m *GetUserInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserInfoReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserInfoReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInfoReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserInfoReplyMultiError(errors)
	}

	return nil
}

// GetUserInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserInfoReplyMultiError) AllErrors() []error { return m }

// GetUserInfoReplyValidationError is the validation error returned by
// GetUserInfoReply.Validate if the designated constraints aren't met.
type GetUserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReplyValidationError) ErrorName() string { return "GetUserInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReplyValidationError{}

// Validate checks the field values on UserLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLoginRequestMultiError, or nil if none found.
func (m *UserLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 32 {
		err := UserLoginRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		err := UserLoginRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserLoginRequestMultiError(errors)
	}

	return nil
}

// UserLoginRequestMultiError is an error wrapping multiple validation errors
// returned by UserLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type UserLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginRequestMultiError) AllErrors() []error { return m }

// UserLoginRequestValidationError is the validation error returned by
// UserLoginRequest.Validate if the designated constraints aren't met.
type UserLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginRequestValidationError) ErrorName() string { return "UserLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginRequestValidationError{}

// Validate checks the field values on UserLoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLoginReplyMultiError,
// or nil if none found.
func (m *UserLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return UserLoginReplyMultiError(errors)
	}

	return nil
}

// UserLoginReplyMultiError is an error wrapping multiple validation errors
// returned by UserLoginReply.ValidateAll() if the designated constraints
// aren't met.
type UserLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginReplyMultiError) AllErrors() []error { return m }

// UserLoginReplyValidationError is the validation error returned by
// UserLoginReply.Validate if the designated constraints aren't met.
type UserLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginReplyValidationError) ErrorName() string { return "UserLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginReplyValidationError{}

// Validate checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterRequestMultiError, or nil if none found.
func (m *UserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 32 {
		err := UserRegisterRequestValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 32 {
		err := UserRegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserRegisterRequestMultiError(errors)
	}

	return nil
}

// UserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by UserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type UserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterRequestMultiError) AllErrors() []error { return m }

// UserRegisterRequestValidationError is the validation error returned by
// UserRegisterRequest.Validate if the designated constraints aren't met.
type UserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterRequestValidationError) ErrorName() string {
	return "UserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterRequestValidationError{}

// Validate checks the field values on UserRegisterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserRegisterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRegisterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserRegisterReplyMultiError, or nil if none found.
func (m *UserRegisterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRegisterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	// no validation rules for UserId

	// no validation rules for Token

	if len(errors) > 0 {
		return UserRegisterReplyMultiError(errors)
	}

	return nil
}

// UserRegisterReplyMultiError is an error wrapping multiple validation errors
// returned by UserRegisterReply.ValidateAll() if the designated constraints
// aren't met.
type UserRegisterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRegisterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRegisterReplyMultiError) AllErrors() []error { return m }

// UserRegisterReplyValidationError is the validation error returned by
// UserRegisterReply.Validate if the designated constraints aren't met.
type UserRegisterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRegisterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRegisterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRegisterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRegisterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRegisterReplyValidationError) ErrorName() string {
	return "UserRegisterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserRegisterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRegisterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRegisterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRegisterReplyValidationError{}

// Validate checks the field values on FeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedRequestMultiError, or
// nil if none found.
func (m *FeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LatestTime

	// no validation rules for Token

	if len(errors) > 0 {
		return FeedRequestMultiError(errors)
	}

	return nil
}

// FeedRequestMultiError is an error wrapping multiple validation errors
// returned by FeedRequest.ValidateAll() if the designated constraints aren't met.
type FeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedRequestMultiError) AllErrors() []error { return m }

// FeedRequestValidationError is the validation error returned by
// FeedRequest.Validate if the designated constraints aren't met.
type FeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedRequestValidationError) ErrorName() string { return "FeedRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedRequestValidationError{}

// Validate checks the field values on FeedReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedReplyMultiError, or nil
// if none found.
func (m *FeedReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedReplyValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedReplyValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedReplyValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextTime

	if len(errors) > 0 {
		return FeedReplyMultiError(errors)
	}

	return nil
}

// FeedReplyMultiError is an error wrapping multiple validation errors returned
// by FeedReply.ValidateAll() if the designated constraints aren't met.
type FeedReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedReplyMultiError) AllErrors() []error { return m }

// FeedReplyValidationError is the validation error returned by
// FeedReply.Validate if the designated constraints aren't met.
type FeedReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedReplyValidationError) ErrorName() string { return "FeedReplyValidationError" }

// Error satisfies the builtin error interface
func (e FeedReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedReplyValidationError{}

// Validate checks the field values on PublishActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishActionRequestMultiError, or nil if none found.
func (m *PublishActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := PublishActionRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := PublishActionRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := PublishActionRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublishActionRequestMultiError(errors)
	}

	return nil
}

// PublishActionRequestMultiError is an error wrapping multiple validation
// errors returned by PublishActionRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishActionRequestMultiError) AllErrors() []error { return m }

// PublishActionRequestValidationError is the validation error returned by
// PublishActionRequest.Validate if the designated constraints aren't met.
type PublishActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishActionRequestValidationError) ErrorName() string {
	return "PublishActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishActionRequestValidationError{}

// Validate checks the field values on PublishActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishActionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishActionReplyMultiError, or nil if none found.
func (m *PublishActionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishActionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if len(errors) > 0 {
		return PublishActionReplyMultiError(errors)
	}

	return nil
}

// PublishActionReplyMultiError is an error wrapping multiple validation errors
// returned by PublishActionReply.ValidateAll() if the designated constraints
// aren't met.
type PublishActionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishActionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishActionReplyMultiError) AllErrors() []error { return m }

// PublishActionReplyValidationError is the validation error returned by
// PublishActionReply.Validate if the designated constraints aren't met.
type PublishActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishActionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishActionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishActionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishActionReplyValidationError) ErrorName() string {
	return "PublishActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PublishActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishActionReplyValidationError{}

// Validate checks the field values on GetPublishListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishListRequestMultiError, or nil if none found.
func (m *GetPublishListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetPublishListRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return GetPublishListRequestMultiError(errors)
	}

	return nil
}

// GetPublishListRequestMultiError is an error wrapping multiple validation
// errors returned by GetPublishListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPublishListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishListRequestMultiError) AllErrors() []error { return m }

// GetPublishListRequestValidationError is the validation error returned by
// GetPublishListRequest.Validate if the designated constraints aren't met.
type GetPublishListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishListRequestValidationError) ErrorName() string {
	return "GetPublishListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishListRequestValidationError{}

// Validate checks the field values on GetPublishListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublishListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublishListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublishListReplyMultiError, or nil if none found.
func (m *GetPublishListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublishListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPublishListReplyValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPublishListReplyValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPublishListReplyValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPublishListReplyMultiError(errors)
	}

	return nil
}

// GetPublishListReplyMultiError is an error wrapping multiple validation
// errors returned by GetPublishListReply.ValidateAll() if the designated
// constraints aren't met.
type GetPublishListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublishListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublishListReplyMultiError) AllErrors() []error { return m }

// GetPublishListReplyValidationError is the validation error returned by
// GetPublishListReply.Validate if the designated constraints aren't met.
type GetPublishListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublishListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublishListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublishListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublishListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublishListReplyValidationError) ErrorName() string {
	return "GetPublishListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublishListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublishListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublishListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublishListReplyValidationError{}

// Validate checks the field values on RelationActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationActionRequestMultiError, or nil if none found.
func (m *RelationActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := RelationActionRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToUserId() <= 0 {
		err := RelationActionRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _RelationActionRequest_ActionType_InLookup[m.GetActionType()]; !ok {
		err := RelationActionRequestValidationError{
			field:  "ActionType",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RelationActionRequestMultiError(errors)
	}

	return nil
}

// RelationActionRequestMultiError is an error wrapping multiple validation
// errors returned by RelationActionRequest.ValidateAll() if the designated
// constraints aren't met.
type RelationActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationActionRequestMultiError) AllErrors() []error { return m }

// RelationActionRequestValidationError is the validation error returned by
// RelationActionRequest.Validate if the designated constraints aren't met.
type RelationActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationActionRequestValidationError) ErrorName() string {
	return "RelationActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RelationActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationActionRequestValidationError{}

var _RelationActionRequest_ActionType_InLookup = map[int64]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on RelationActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RelationActionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RelationActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RelationActionReplyMultiError, or nil if none found.
func (m *RelationActionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RelationActionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if len(errors) > 0 {
		return RelationActionReplyMultiError(errors)
	}

	return nil
}

// RelationActionReplyMultiError is an error wrapping multiple validation
// errors returned by RelationActionReply.ValidateAll() if the designated
// constraints aren't met.
type RelationActionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationActionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationActionReplyMultiError) AllErrors() []error { return m }

// RelationActionReplyValidationError is the validation error returned by
// RelationActionReply.Validate if the designated constraints aren't met.
type RelationActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationActionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationActionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationActionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationActionReplyValidationError) ErrorName() string {
	return "RelationActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RelationActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelationActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationActionReplyValidationError{}

// Validate checks the field values on GetFollowerListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowerListRequestMultiError, or nil if none found.
func (m *GetFollowerListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetFollowerListRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return GetFollowerListRequestMultiError(errors)
	}

	return nil
}

// GetFollowerListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFollowerListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFollowerListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListRequestMultiError) AllErrors() []error { return m }

// GetFollowerListRequestValidationError is the validation error returned by
// GetFollowerListRequest.Validate if the designated constraints aren't met.
type GetFollowerListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListRequestValidationError) ErrorName() string {
	return "GetFollowerListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListRequestValidationError{}

// Validate checks the field values on GetFollowerListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowerListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowerListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowerListReplyMultiError, or nil if none found.
func (m *GetFollowerListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowerListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFollowerListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFollowerListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFollowerListReplyValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFollowerListReplyMultiError(errors)
	}

	return nil
}

// GetFollowerListReplyMultiError is an error wrapping multiple validation
// errors returned by GetFollowerListReply.ValidateAll() if the designated
// constraints aren't met.
type GetFollowerListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowerListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowerListReplyMultiError) AllErrors() []error { return m }

// GetFollowerListReplyValidationError is the validation error returned by
// GetFollowerListReply.Validate if the designated constraints aren't met.
type GetFollowerListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowerListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowerListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowerListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowerListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowerListReplyValidationError) ErrorName() string {
	return "GetFollowerListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowerListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowerListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowerListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowerListReplyValidationError{}

// Validate checks the field values on GetFollowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowListRequestMultiError, or nil if none found.
func (m *GetFollowListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetFollowListRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return GetFollowListRequestMultiError(errors)
	}

	return nil
}

// GetFollowListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFollowListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFollowListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListRequestMultiError) AllErrors() []error { return m }

// GetFollowListRequestValidationError is the validation error returned by
// GetFollowListRequest.Validate if the designated constraints aren't met.
type GetFollowListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListRequestValidationError) ErrorName() string {
	return "GetFollowListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListRequestValidationError{}

// Validate checks the field values on GetFollowListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFollowListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFollowListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFollowListReplyMultiError, or nil if none found.
func (m *GetFollowListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFollowListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFollowListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFollowListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFollowListReplyValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFollowListReplyMultiError(errors)
	}

	return nil
}

// GetFollowListReplyMultiError is an error wrapping multiple validation errors
// returned by GetFollowListReply.ValidateAll() if the designated constraints
// aren't met.
type GetFollowListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFollowListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFollowListReplyMultiError) AllErrors() []error { return m }

// GetFollowListReplyValidationError is the validation error returned by
// GetFollowListReply.Validate if the designated constraints aren't met.
type GetFollowListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFollowListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFollowListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFollowListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFollowListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFollowListReplyValidationError) ErrorName() string {
	return "GetFollowListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFollowListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFollowListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFollowListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFollowListReplyValidationError{}

// Validate checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListRequestMultiError, or nil if none found.
func (m *GetFriendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := GetFriendListRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFriendListRequestMultiError(errors)
	}

	return nil
}

// GetFriendListRequestMultiError is an error wrapping multiple validation
// errors returned by GetFriendListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFriendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListRequestMultiError) AllErrors() []error { return m }

// GetFriendListRequestValidationError is the validation error returned by
// GetFriendListRequest.Validate if the designated constraints aren't met.
type GetFriendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListRequestValidationError) ErrorName() string {
	return "GetFriendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListRequestValidationError{}

// Validate checks the field values on GetFriendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFriendListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFriendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFriendListReplyMultiError, or nil if none found.
func (m *GetFriendListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFriendListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetUserList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFriendListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFriendListReplyValidationError{
						field:  fmt.Sprintf("UserList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFriendListReplyValidationError{
					field:  fmt.Sprintf("UserList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFriendListReplyMultiError(errors)
	}

	return nil
}

// GetFriendListReplyMultiError is an error wrapping multiple validation errors
// returned by GetFriendListReply.ValidateAll() if the designated constraints
// aren't met.
type GetFriendListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFriendListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFriendListReplyMultiError) AllErrors() []error { return m }

// GetFriendListReplyValidationError is the validation error returned by
// GetFriendListReply.Validate if the designated constraints aren't met.
type GetFriendListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFriendListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFriendListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFriendListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFriendListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFriendListReplyValidationError) ErrorName() string {
	return "GetFriendListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFriendListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFriendListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFriendListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFriendListReplyValidationError{}

// Validate checks the field values on GetMessageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageListRequestMultiError, or nil if none found.
func (m *GetMessageListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := GetMessageListRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToUserId() <= 0 {
		err := GetMessageListRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PreMsgTime

	if len(errors) > 0 {
		return GetMessageListRequestMultiError(errors)
	}

	return nil
}

// GetMessageListRequestMultiError is an error wrapping multiple validation
// errors returned by GetMessageListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMessageListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageListRequestMultiError) AllErrors() []error { return m }

// GetMessageListRequestValidationError is the validation error returned by
// GetMessageListRequest.Validate if the designated constraints aren't met.
type GetMessageListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageListRequestValidationError) ErrorName() string {
	return "GetMessageListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageListRequestValidationError{}

// Validate checks the field values on GetMessageListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageListReplyMultiError, or nil if none found.
func (m *GetMessageListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetMessageList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMessageListReplyValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMessageListReplyValidationError{
						field:  fmt.Sprintf("MessageList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessageListReplyValidationError{
					field:  fmt.Sprintf("MessageList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMessageListReplyMultiError(errors)
	}

	return nil
}

// GetMessageListReplyMultiError is an error wrapping multiple validation
// errors returned by GetMessageListReply.ValidateAll() if the designated
// constraints aren't met.
type GetMessageListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageListReplyMultiError) AllErrors() []error { return m }

// GetMessageListReplyValidationError is the validation error returned by
// GetMessageListReply.Validate if the designated constraints aren't met.
type GetMessageListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageListReplyValidationError) ErrorName() string {
	return "GetMessageListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageListReplyValidationError{}

// Validate checks the field values on MessageActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageActionRequestMultiError, or nil if none found.
func (m *MessageActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := MessageActionRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToUserId() <= 0 {
		err := MessageActionRequestValidationError{
			field:  "ToUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _MessageActionRequest_ActionType_InLookup[m.GetActionType()]; !ok {
		err := MessageActionRequestValidationError{
			field:  "ActionType",
			reason: "value must be in list [1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := MessageActionRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MessageActionRequestMultiError(errors)
	}

	return nil
}

// MessageActionRequestMultiError is an error wrapping multiple validation
// errors returned by MessageActionRequest.ValidateAll() if the designated
// constraints aren't met.
type MessageActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageActionRequestMultiError) AllErrors() []error { return m }

// MessageActionRequestValidationError is the validation error returned by
// MessageActionRequest.Validate if the designated constraints aren't met.
type MessageActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageActionRequestValidationError) ErrorName() string {
	return "MessageActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MessageActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageActionRequestValidationError{}

var _MessageActionRequest_ActionType_InLookup = map[uint32]struct{}{
	1: {},
}

// Validate checks the field values on MessageActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageActionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageActionReplyMultiError, or nil if none found.
func (m *MessageActionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageActionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if len(errors) > 0 {
		return MessageActionReplyMultiError(errors)
	}

	return nil
}

// MessageActionReplyMultiError is an error wrapping multiple validation errors
// returned by MessageActionReply.ValidateAll() if the designated constraints
// aren't met.
type MessageActionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageActionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageActionReplyMultiError) AllErrors() []error { return m }

// MessageActionReplyValidationError is the validation error returned by
// MessageActionReply.Validate if the designated constraints aren't met.
type MessageActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageActionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageActionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageActionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageActionReplyValidationError) ErrorName() string {
	return "MessageActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MessageActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageActionReplyValidationError{}

// Validate checks the field values on GetFavoriteVideoListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavoriteVideoListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavoriteVideoListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavoriteVideoListRequestMultiError, or nil if none found.
func (m *GetFavoriteVideoListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoriteVideoListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetFavoriteVideoListRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return GetFavoriteVideoListRequestMultiError(errors)
	}

	return nil
}

// GetFavoriteVideoListRequestMultiError is an error wrapping multiple
// validation errors returned by GetFavoriteVideoListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetFavoriteVideoListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoriteVideoListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoriteVideoListRequestMultiError) AllErrors() []error { return m }

// GetFavoriteVideoListRequestValidationError is the validation error returned
// by GetFavoriteVideoListRequest.Validate if the designated constraints
// aren't met.
type GetFavoriteVideoListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoriteVideoListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoriteVideoListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoriteVideoListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoriteVideoListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoriteVideoListRequestValidationError) ErrorName() string {
	return "GetFavoriteVideoListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoriteVideoListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoriteVideoListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoriteVideoListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoriteVideoListRequestValidationError{}

// Validate checks the field values on GetFavoriteVideoListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavoriteVideoListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavoriteVideoListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavoriteVideoListReplyMultiError, or nil if none found.
func (m *GetFavoriteVideoListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoriteVideoListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetVideoList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFavoriteVideoListReplyValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFavoriteVideoListReplyValidationError{
						field:  fmt.Sprintf("VideoList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFavoriteVideoListReplyValidationError{
					field:  fmt.Sprintf("VideoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFavoriteVideoListReplyMultiError(errors)
	}

	return nil
}

// GetFavoriteVideoListReplyMultiError is an error wrapping multiple validation
// errors returned by GetFavoriteVideoListReply.ValidateAll() if the
// designated constraints aren't met.
type GetFavoriteVideoListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoriteVideoListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoriteVideoListReplyMultiError) AllErrors() []error { return m }

// GetFavoriteVideoListReplyValidationError is the validation error returned by
// GetFavoriteVideoListReply.Validate if the designated constraints aren't met.
type GetFavoriteVideoListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoriteVideoListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoriteVideoListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoriteVideoListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoriteVideoListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoriteVideoListReplyValidationError) ErrorName() string {
	return "GetFavoriteVideoListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoriteVideoListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoriteVideoListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoriteVideoListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoriteVideoListReplyValidationError{}

// Validate checks the field values on FavoriteActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FavoriteActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FavoriteActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FavoriteActionRequestMultiError, or nil if none found.
func (m *FavoriteActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FavoriteActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := FavoriteActionRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVideoId() <= 0 {
		err := FavoriteActionRequestValidationError{
			field:  "VideoId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _FavoriteActionRequest_ActionType_InLookup[m.GetActionType()]; !ok {
		err := FavoriteActionRequestValidationError{
			field:  "ActionType",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FavoriteActionRequestMultiError(errors)
	}

	return nil
}

// FavoriteActionRequestMultiError is an error wrapping multiple validation
// errors returned by FavoriteActionRequest.ValidateAll() if the designated
// constraints aren't met.
type FavoriteActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoriteActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoriteActionRequestMultiError) AllErrors() []error { return m }

// FavoriteActionRequestValidationError is the validation error returned by
// FavoriteActionRequest.Validate if the designated constraints aren't met.
type FavoriteActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoriteActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoriteActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoriteActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoriteActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoriteActionRequestValidationError) ErrorName() string {
	return "FavoriteActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FavoriteActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavoriteActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoriteActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoriteActionRequestValidationError{}

var _FavoriteActionRequest_ActionType_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on FavoriteActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FavoriteActionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FavoriteActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FavoriteActionReplyMultiError, or nil if none found.
func (m *FavoriteActionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FavoriteActionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if len(errors) > 0 {
		return FavoriteActionReplyMultiError(errors)
	}

	return nil
}

// FavoriteActionReplyMultiError is an error wrapping multiple validation
// errors returned by FavoriteActionReply.ValidateAll() if the designated
// constraints aren't met.
type FavoriteActionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavoriteActionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavoriteActionReplyMultiError) AllErrors() []error { return m }

// FavoriteActionReplyValidationError is the validation error returned by
// FavoriteActionReply.Validate if the designated constraints aren't met.
type FavoriteActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavoriteActionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavoriteActionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavoriteActionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavoriteActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavoriteActionReplyValidationError) ErrorName() string {
	return "FavoriteActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FavoriteActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavoriteActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavoriteActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavoriteActionReplyValidationError{}

// Validate checks the field values on CommentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentListRequestMultiError, or nil if none found.
func (m *CommentListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if m.GetVideoId() <= 0 {
		err := CommentListRequestValidationError{
			field:  "VideoId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommentListRequestMultiError(errors)
	}

	return nil
}

// CommentListRequestMultiError is an error wrapping multiple validation errors
// returned by CommentListRequest.ValidateAll() if the designated constraints
// aren't met.
type CommentListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentListRequestMultiError) AllErrors() []error { return m }

// CommentListRequestValidationError is the validation error returned by
// CommentListRequest.Validate if the designated constraints aren't met.
type CommentListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentListRequestValidationError) ErrorName() string {
	return "CommentListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentListRequestValidationError{}

// Validate checks the field values on CommentListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommentListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentListReplyMultiError, or nil if none found.
func (m *CommentListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	for idx, item := range m.GetCommentList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentListReplyValidationError{
						field:  fmt.Sprintf("CommentList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentListReplyValidationError{
						field:  fmt.Sprintf("CommentList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentListReplyValidationError{
					field:  fmt.Sprintf("CommentList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommentListReplyMultiError(errors)
	}

	return nil
}

// CommentListReplyMultiError is an error wrapping multiple validation errors
// returned by CommentListReply.ValidateAll() if the designated constraints
// aren't met.
type CommentListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentListReplyMultiError) AllErrors() []error { return m }

// CommentListReplyValidationError is the validation error returned by
// CommentListReply.Validate if the designated constraints aren't met.
type CommentListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentListReplyValidationError) ErrorName() string { return "CommentListReplyValidationError" }

// Error satisfies the builtin error interface
func (e CommentListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentListReplyValidationError{}

// Validate checks the field values on CommentActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentActionRequestMultiError, or nil if none found.
func (m *CommentActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := CommentActionRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVideoId() <= 0 {
		err := CommentActionRequestValidationError{
			field:  "VideoId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CommentActionRequest_ActionType_InLookup[m.GetActionType()]; !ok {
		err := CommentActionRequestValidationError{
			field:  "ActionType",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CommentText

	// no validation rules for CommentId

	if len(errors) > 0 {
		return CommentActionRequestMultiError(errors)
	}

	return nil
}

// CommentActionRequestMultiError is an error wrapping multiple validation
// errors returned by CommentActionRequest.ValidateAll() if the designated
// constraints aren't met.
type CommentActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentActionRequestMultiError) AllErrors() []error { return m }

// CommentActionRequestValidationError is the validation error returned by
// CommentActionRequest.Validate if the designated constraints aren't met.
type CommentActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentActionRequestValidationError) ErrorName() string {
	return "CommentActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CommentActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentActionRequestValidationError{}

var _CommentActionRequest_ActionType_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on CommentActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommentActionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentActionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentActionReplyMultiError, or nil if none found.
func (m *CommentActionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentActionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for StatusMsg

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentActionReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentActionReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentActionReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentActionReplyMultiError(errors)
	}

	return nil
}

// CommentActionReplyMultiError is an error wrapping multiple validation errors
// returned by CommentActionReply.ValidateAll() if the designated constraints
// aren't met.
type CommentActionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentActionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentActionReplyMultiError) AllErrors() []error { return m }

// CommentActionReplyValidationError is the validation error returned by
// CommentActionReply.Validate if the designated constraints aren't met.
type CommentActionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentActionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentActionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentActionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentActionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentActionReplyValidationError) ErrorName() string {
	return "CommentActionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CommentActionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentActionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentActionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentActionReplyValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for CreateDate

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ToUserId

	// no validation rules for FromUserId

	// no validation rules for Content

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PlayUrl

	// no validation rules for CoverUrl

	// no validation rules for FavoriteCount

	// no validation rules for CommentCount

	// no validation rules for IsFavorite

	// no validation rules for Title

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FollowCount

	// no validation rules for FollowerCount

	// no validation rules for IsFollow

	// no validation rules for Avatar

	// no validation rules for BackgroundImage

	// no validation rules for Signature

	// no validation rules for TotalFavorited

	// no validation rules for WorkCount

	// no validation rules for FavoriteCount

	// no validation rules for Message

	// no validation rules for MsgType

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}
