// Code generated by MockGen. DO NOT EDIT.
// Source: seq.go
//
// Generated by this command:
//
//	mockgen -source=seq.go -destination=mock/seq.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	reflect "reflect"

	clientv3 "go.etcd.io/etcd/client/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockSeqRepo is a mock of SeqRepo interface.
type MockSeqRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSeqRepoMockRecorder
}

// MockSeqRepoMockRecorder is the mock recorder for MockSeqRepo.
type MockSeqRepoMockRecorder struct {
	mock *MockSeqRepo
}

// NewMockSeqRepo creates a new mock instance.
func NewMockSeqRepo(ctrl *gomock.Controller) *MockSeqRepo {
	mock := &MockSeqRepo{ctrl: ctrl}
	mock.recorder = &MockSeqRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeqRepo) EXPECT() *MockSeqRepoMockRecorder {
	return m.recorder
}

// GetKey mocks base method.
func (m *MockSeqRepo) GetKey(ctx context.Context, key string) (*clientv3.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, key)
	ret0, _ := ret[0].(*clientv3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockSeqRepoMockRecorder) GetKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockSeqRepo)(nil).GetKey), ctx, key)
}

// GetKeyWithPrefix mocks base method.
func (m *MockSeqRepo) GetKeyWithPrefix(ctx context.Context, prefix string) (*clientv3.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyWithPrefix", ctx, prefix)
	ret0, _ := ret[0].(*clientv3.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyWithPrefix indicates an expected call of GetKeyWithPrefix.
func (mr *MockSeqRepoMockRecorder) GetKeyWithPrefix(ctx, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyWithPrefix", reflect.TypeOf((*MockSeqRepo)(nil).GetKeyWithPrefix), ctx, prefix)
}

// SetKey mocks base method.
func (m *MockSeqRepo) SetKey(ctx context.Context, key, value string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKey", ctx, key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetKey indicates an expected call of SetKey.
func (mr *MockSeqRepoMockRecorder) SetKey(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockSeqRepo)(nil).SetKey), ctx, key, value)
}

// SetKeyWithOptimizeLock mocks base method.
func (m *MockSeqRepo) SetKeyWithOptimizeLock(ctx context.Context, key, value string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeyWithOptimizeLock", ctx, key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetKeyWithOptimizeLock indicates an expected call of SetKeyWithOptimizeLock.
func (mr *MockSeqRepoMockRecorder) SetKeyWithOptimizeLock(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyWithOptimizeLock", reflect.TypeOf((*MockSeqRepo)(nil).SetKeyWithOptimizeLock), ctx, key, value)
}
