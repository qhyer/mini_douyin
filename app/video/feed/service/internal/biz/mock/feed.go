// Code generated by MockGen. DO NOT EDIT.
// Source: feed.go
//
// Generated by this command:
//
//	mockgen -source=feed.go -destination=mock/feed.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	entity "douyin/app/video/feed/common/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedRepo is a mock of FeedRepo interface.
type MockFeedRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFeedRepoMockRecorder
}

// MockFeedRepoMockRecorder is the mock recorder for MockFeedRepo.
type MockFeedRepoMockRecorder struct {
	mock *MockFeedRepo
}

// NewMockFeedRepo creates a new mock instance.
func NewMockFeedRepo(ctrl *gomock.Controller) *MockFeedRepo {
	mock := &MockFeedRepo{ctrl: ctrl}
	mock.recorder = &MockFeedRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedRepo) EXPECT() *MockFeedRepoMockRecorder {
	return m.recorder
}

// GetPublishedVideoByLatestTime mocks base method.
func (m *MockFeedRepo) GetPublishedVideoByLatestTime(ctx context.Context, latestTime int64) ([]*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedVideoByLatestTime", ctx, latestTime)
	ret0, _ := ret[0].([]*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedVideoByLatestTime indicates an expected call of GetPublishedVideoByLatestTime.
func (mr *MockFeedRepoMockRecorder) GetPublishedVideoByLatestTime(ctx, latestTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedVideoByLatestTime", reflect.TypeOf((*MockFeedRepo)(nil).GetPublishedVideoByLatestTime), ctx, latestTime)
}

// GetPublishedVideoByUserId mocks base method.
func (m *MockFeedRepo) GetPublishedVideoByUserId(ctx context.Context, userId int64) ([]*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedVideoByUserId", ctx, userId)
	ret0, _ := ret[0].([]*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedVideoByUserId indicates an expected call of GetPublishedVideoByUserId.
func (mr *MockFeedRepoMockRecorder) GetPublishedVideoByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedVideoByUserId", reflect.TypeOf((*MockFeedRepo)(nil).GetPublishedVideoByUserId), ctx, userId)
}

// GetUserFavoriteVideoIdListByUserId mocks base method.
func (m *MockFeedRepo) GetUserFavoriteVideoIdListByUserId(ctx context.Context, userId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFavoriteVideoIdListByUserId", ctx, userId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFavoriteVideoIdListByUserId indicates an expected call of GetUserFavoriteVideoIdListByUserId.
func (mr *MockFeedRepoMockRecorder) GetUserFavoriteVideoIdListByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFavoriteVideoIdListByUserId", reflect.TypeOf((*MockFeedRepo)(nil).GetUserFavoriteVideoIdListByUserId), ctx, userId)
}

// GetUserInfoByUserId mocks base method.
func (m *MockFeedRepo) GetUserInfoByUserId(ctx context.Context, userId, toUserId int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUserId", ctx, userId, toUserId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUserId indicates an expected call of GetUserInfoByUserId.
func (mr *MockFeedRepoMockRecorder) GetUserInfoByUserId(ctx, userId, toUserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUserId", reflect.TypeOf((*MockFeedRepo)(nil).GetUserInfoByUserId), ctx, userId, toUserId)
}

// MCountCommentByVideoId mocks base method.
func (m *MockFeedRepo) MCountCommentByVideoId(ctx context.Context, videoId []int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MCountCommentByVideoId", ctx, videoId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MCountCommentByVideoId indicates an expected call of MCountCommentByVideoId.
func (mr *MockFeedRepoMockRecorder) MCountCommentByVideoId(ctx, videoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCountCommentByVideoId", reflect.TypeOf((*MockFeedRepo)(nil).MCountCommentByVideoId), ctx, videoId)
}

// MCountVideoFavoritedByVideoId mocks base method.
func (m *MockFeedRepo) MCountVideoFavoritedByVideoId(ctx context.Context, videoId []int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MCountVideoFavoritedByVideoId", ctx, videoId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MCountVideoFavoritedByVideoId indicates an expected call of MCountVideoFavoritedByVideoId.
func (mr *MockFeedRepoMockRecorder) MCountVideoFavoritedByVideoId(ctx, videoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCountVideoFavoritedByVideoId", reflect.TypeOf((*MockFeedRepo)(nil).MCountVideoFavoritedByVideoId), ctx, videoId)
}

// MGetIsVideoFavoritedByVideoIdAndUserId mocks base method.
func (m *MockFeedRepo) MGetIsVideoFavoritedByVideoIdAndUserId(ctx context.Context, userId int64, videoIds []int64) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetIsVideoFavoritedByVideoIdAndUserId", ctx, userId, videoIds)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetIsVideoFavoritedByVideoIdAndUserId indicates an expected call of MGetIsVideoFavoritedByVideoIdAndUserId.
func (mr *MockFeedRepoMockRecorder) MGetIsVideoFavoritedByVideoIdAndUserId(ctx, userId, videoIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetIsVideoFavoritedByVideoIdAndUserId", reflect.TypeOf((*MockFeedRepo)(nil).MGetIsVideoFavoritedByVideoIdAndUserId), ctx, userId, videoIds)
}

// MGetUserInfoByUserId mocks base method.
func (m *MockFeedRepo) MGetUserInfoByUserId(ctx context.Context, userId int64, toUserIds []int64) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetUserInfoByUserId", ctx, userId, toUserIds)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetUserInfoByUserId indicates an expected call of MGetUserInfoByUserId.
func (mr *MockFeedRepoMockRecorder) MGetUserInfoByUserId(ctx, userId, toUserIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetUserInfoByUserId", reflect.TypeOf((*MockFeedRepo)(nil).MGetUserInfoByUserId), ctx, userId, toUserIds)
}

// MGetVideoInfoByVideoId mocks base method.
func (m *MockFeedRepo) MGetVideoInfoByVideoId(ctx context.Context, videoIds []int64) ([]*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetVideoInfoByVideoId", ctx, videoIds)
	ret0, _ := ret[0].([]*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetVideoInfoByVideoId indicates an expected call of MGetVideoInfoByVideoId.
func (mr *MockFeedRepoMockRecorder) MGetVideoInfoByVideoId(ctx, videoIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetVideoInfoByVideoId", reflect.TypeOf((*MockFeedRepo)(nil).MGetVideoInfoByVideoId), ctx, videoIds)
}
