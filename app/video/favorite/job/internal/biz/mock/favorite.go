// Code generated by MockGen. DO NOT EDIT.
// Source: favorite.go
//
// Generated by this command:
//
//	mockgen -source=favorite.go -destination=mock/favorite.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	event "douyin/app/video/favorite/common/event"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFavoriteRepo is a mock of FavoriteRepo interface.
type MockFavoriteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFavoriteRepoMockRecorder
}

// MockFavoriteRepoMockRecorder is the mock recorder for MockFavoriteRepo.
type MockFavoriteRepoMockRecorder struct {
	mock *MockFavoriteRepo
}

// NewMockFavoriteRepo creates a new mock instance.
func NewMockFavoriteRepo(ctrl *gomock.Controller) *MockFavoriteRepo {
	mock := &MockFavoriteRepo{ctrl: ctrl}
	mock.recorder = &MockFavoriteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavoriteRepo) EXPECT() *MockFavoriteRepoMockRecorder {
	return m.recorder
}

// BatchCreateFavorite mocks base method.
func (m *MockFavoriteRepo) BatchCreateFavorite(ctx context.Context, favorites []*event.FavoriteAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateFavorite", ctx, favorites)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateFavorite indicates an expected call of BatchCreateFavorite.
func (mr *MockFavoriteRepoMockRecorder) BatchCreateFavorite(ctx, favorites any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateFavorite", reflect.TypeOf((*MockFavoriteRepo)(nil).BatchCreateFavorite), ctx, favorites)
}

// BatchDeleteFavorite mocks base method.
func (m *MockFavoriteRepo) BatchDeleteFavorite(ctx context.Context, favorites []*event.FavoriteAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteFavorite", ctx, favorites)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteFavorite indicates an expected call of BatchDeleteFavorite.
func (mr *MockFavoriteRepoMockRecorder) BatchDeleteFavorite(ctx, favorites any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteFavorite", reflect.TypeOf((*MockFavoriteRepo)(nil).BatchDeleteFavorite), ctx, favorites)
}

// BatchUpdateUserFavoriteCount mocks base method.
func (m *MockFavoriteRepo) BatchUpdateUserFavoriteCount(ctx context.Context, stats map[int64]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateUserFavoriteCount", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateUserFavoriteCount indicates an expected call of BatchUpdateUserFavoriteCount.
func (mr *MockFavoriteRepoMockRecorder) BatchUpdateUserFavoriteCount(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateUserFavoriteCount", reflect.TypeOf((*MockFavoriteRepo)(nil).BatchUpdateUserFavoriteCount), ctx, stats)
}

// BatchUpdateUserFavoritedCount mocks base method.
func (m *MockFavoriteRepo) BatchUpdateUserFavoritedCount(ctx context.Context, stats map[int64]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateUserFavoritedCount", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateUserFavoritedCount indicates an expected call of BatchUpdateUserFavoritedCount.
func (mr *MockFavoriteRepoMockRecorder) BatchUpdateUserFavoritedCount(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateUserFavoritedCount", reflect.TypeOf((*MockFavoriteRepo)(nil).BatchUpdateUserFavoritedCount), ctx, stats)
}

// BatchUpdateVideoFavoritedCount mocks base method.
func (m *MockFavoriteRepo) BatchUpdateVideoFavoritedCount(ctx context.Context, stats map[int64]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateVideoFavoritedCount", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateVideoFavoritedCount indicates an expected call of BatchUpdateVideoFavoritedCount.
func (mr *MockFavoriteRepoMockRecorder) BatchUpdateVideoFavoritedCount(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateVideoFavoritedCount", reflect.TypeOf((*MockFavoriteRepo)(nil).BatchUpdateVideoFavoritedCount), ctx, stats)
}

// CreateFavorite mocks base method.
func (m *MockFavoriteRepo) CreateFavorite(ctx context.Context, favorite *event.FavoriteAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavorite", ctx, favorite)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFavorite indicates an expected call of CreateFavorite.
func (mr *MockFavoriteRepoMockRecorder) CreateFavorite(ctx, favorite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavorite", reflect.TypeOf((*MockFavoriteRepo)(nil).CreateFavorite), ctx, favorite)
}

// DeleteFavorite mocks base method.
func (m *MockFavoriteRepo) DeleteFavorite(ctx context.Context, favorite *event.FavoriteAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFavorite", ctx, favorite)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFavorite indicates an expected call of DeleteFavorite.
func (mr *MockFavoriteRepoMockRecorder) DeleteFavorite(ctx, favorite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFavorite", reflect.TypeOf((*MockFavoriteRepo)(nil).DeleteFavorite), ctx, favorite)
}

// GetVideoFavoritedCountFromCache mocks base method.
func (m *MockFavoriteRepo) GetVideoFavoritedCountFromCache(ctx context.Context, procId int) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoFavoritedCountFromCache", ctx, procId)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoFavoritedCountFromCache indicates an expected call of GetVideoFavoritedCountFromCache.
func (mr *MockFavoriteRepoMockRecorder) GetVideoFavoritedCountFromCache(ctx, procId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoFavoritedCountFromCache", reflect.TypeOf((*MockFavoriteRepo)(nil).GetVideoFavoritedCountFromCache), ctx, procId)
}

// PurgeVideoFavoritedTempCount mocks base method.
func (m *MockFavoriteRepo) PurgeVideoFavoritedTempCount(ctx context.Context, procId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeVideoFavoritedTempCount", ctx, procId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeVideoFavoritedTempCount indicates an expected call of PurgeVideoFavoritedTempCount.
func (mr *MockFavoriteRepoMockRecorder) PurgeVideoFavoritedTempCount(ctx, procId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeVideoFavoritedTempCount", reflect.TypeOf((*MockFavoriteRepo)(nil).PurgeVideoFavoritedTempCount), ctx, procId)
}

// UpdateUserFavoriteCount mocks base method.
func (m *MockFavoriteRepo) UpdateUserFavoriteCount(ctx context.Context, userId, incr int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserFavoriteCount", ctx, userId, incr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserFavoriteCount indicates an expected call of UpdateUserFavoriteCount.
func (mr *MockFavoriteRepoMockRecorder) UpdateUserFavoriteCount(ctx, userId, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserFavoriteCount", reflect.TypeOf((*MockFavoriteRepo)(nil).UpdateUserFavoriteCount), ctx, userId, incr)
}

// UpdateUserFavoritedCount mocks base method.
func (m *MockFavoriteRepo) UpdateUserFavoritedCount(ctx context.Context, userId, incr int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserFavoritedCount", ctx, userId, incr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserFavoritedCount indicates an expected call of UpdateUserFavoritedCount.
func (mr *MockFavoriteRepoMockRecorder) UpdateUserFavoritedCount(ctx, userId, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserFavoritedCount", reflect.TypeOf((*MockFavoriteRepo)(nil).UpdateUserFavoritedCount), ctx, userId, incr)
}

// UpdateVideoFavoritedCount mocks base method.
func (m *MockFavoriteRepo) UpdateVideoFavoritedCount(ctx context.Context, videoId, incr int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideoFavoritedCount", ctx, videoId, incr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideoFavoritedCount indicates an expected call of UpdateVideoFavoritedCount.
func (mr *MockFavoriteRepoMockRecorder) UpdateVideoFavoritedCount(ctx, videoId, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoFavoritedCount", reflect.TypeOf((*MockFavoriteRepo)(nil).UpdateVideoFavoritedCount), ctx, videoId, incr)
}

// UpdateVideoFavoritedTempCount mocks base method.
func (m *MockFavoriteRepo) UpdateVideoFavoritedTempCount(ctx context.Context, procId int, videoId, incr int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideoFavoritedTempCount", ctx, procId, videoId, incr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideoFavoritedTempCount indicates an expected call of UpdateVideoFavoritedTempCount.
func (mr *MockFavoriteRepoMockRecorder) UpdateVideoFavoritedTempCount(ctx, procId, videoId, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoFavoritedTempCount", reflect.TypeOf((*MockFavoriteRepo)(nil).UpdateVideoFavoritedTempCount), ctx, procId, videoId, incr)
}
