// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go
//
// Generated by this command:
//
//	mockgen -source=comment.go -destination=mock/comment.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	event "douyin/app/video/comment/common/event"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommentRepo is a mock of CommentRepo interface.
type MockCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepoMockRecorder
}

// MockCommentRepoMockRecorder is the mock recorder for MockCommentRepo.
type MockCommentRepoMockRecorder struct {
	mock *MockCommentRepo
}

// NewMockCommentRepo creates a new mock instance.
func NewMockCommentRepo(ctrl *gomock.Controller) *MockCommentRepo {
	mock := &MockCommentRepo{ctrl: ctrl}
	mock.recorder = &MockCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepo) EXPECT() *MockCommentRepoMockRecorder {
	return m.recorder
}

// BatchCreateComment mocks base method.
func (m *MockCommentRepo) BatchCreateComment(ctx context.Context, comments []*event.CommentAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateComment", ctx, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateComment indicates an expected call of BatchCreateComment.
func (mr *MockCommentRepoMockRecorder) BatchCreateComment(ctx, comments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateComment", reflect.TypeOf((*MockCommentRepo)(nil).BatchCreateComment), ctx, comments)
}

// BatchDeleteComment mocks base method.
func (m *MockCommentRepo) BatchDeleteComment(ctx context.Context, comments []*event.CommentAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteComment", ctx, comments)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteComment indicates an expected call of BatchDeleteComment.
func (mr *MockCommentRepoMockRecorder) BatchDeleteComment(ctx, comments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteComment", reflect.TypeOf((*MockCommentRepo)(nil).BatchDeleteComment), ctx, comments)
}

// BatchUpdateVideoCommentCount mocks base method.
func (m *MockCommentRepo) BatchUpdateVideoCommentCount(ctx context.Context, stats map[int64]int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateVideoCommentCount", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateVideoCommentCount indicates an expected call of BatchUpdateVideoCommentCount.
func (mr *MockCommentRepoMockRecorder) BatchUpdateVideoCommentCount(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateVideoCommentCount", reflect.TypeOf((*MockCommentRepo)(nil).BatchUpdateVideoCommentCount), ctx, stats)
}

// CreateComment mocks base method.
func (m *MockCommentRepo) CreateComment(ctx context.Context, comment *event.CommentAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepoMockRecorder) CreateComment(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepo)(nil).CreateComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentRepo) DeleteComment(ctx context.Context, comment *event.CommentAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepoMockRecorder) DeleteComment(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepo)(nil).DeleteComment), ctx, comment)
}

// GetVideoCommentTempCountFromCache mocks base method.
func (m *MockCommentRepo) GetVideoCommentTempCountFromCache(ctx context.Context, procId int) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoCommentTempCountFromCache", ctx, procId)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoCommentTempCountFromCache indicates an expected call of GetVideoCommentTempCountFromCache.
func (mr *MockCommentRepoMockRecorder) GetVideoCommentTempCountFromCache(ctx, procId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoCommentTempCountFromCache", reflect.TypeOf((*MockCommentRepo)(nil).GetVideoCommentTempCountFromCache), ctx, procId)
}

// PurgeVideoCommentTempCountCache mocks base method.
func (m *MockCommentRepo) PurgeVideoCommentTempCountCache(ctx context.Context, procId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeVideoCommentTempCountCache", ctx, procId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeVideoCommentTempCountCache indicates an expected call of PurgeVideoCommentTempCountCache.
func (mr *MockCommentRepoMockRecorder) PurgeVideoCommentTempCountCache(ctx, procId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeVideoCommentTempCountCache", reflect.TypeOf((*MockCommentRepo)(nil).PurgeVideoCommentTempCountCache), ctx, procId)
}

// UpdateVideoCommentCount mocks base method.
func (m *MockCommentRepo) UpdateVideoCommentCount(ctx context.Context, videoId, incr int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideoCommentCount", ctx, videoId, incr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideoCommentCount indicates an expected call of UpdateVideoCommentCount.
func (mr *MockCommentRepoMockRecorder) UpdateVideoCommentCount(ctx, videoId, incr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoCommentCount", reflect.TypeOf((*MockCommentRepo)(nil).UpdateVideoCommentCount), ctx, videoId, incr)
}

// UpdateVideoCommentTempCountCache mocks base method.
func (m *MockCommentRepo) UpdateVideoCommentTempCountCache(ctx context.Context, procId int, stat *event.CommentStat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideoCommentTempCountCache", ctx, procId, stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVideoCommentTempCountCache indicates an expected call of UpdateVideoCommentTempCountCache.
func (mr *MockCommentRepoMockRecorder) UpdateVideoCommentTempCountCache(ctx, procId, stat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoCommentTempCountCache", reflect.TypeOf((*MockCommentRepo)(nil).UpdateVideoCommentTempCountCache), ctx, procId, stat)
}
