// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go
//
// Generated by this command:
//
//	mockgen -source=comment.go -destination=mock/comment.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	entity "douyin/app/video/comment/common/entity"
	event "douyin/app/video/comment/common/event"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommentRepo is a mock of CommentRepo interface.
type MockCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepoMockRecorder
}

// MockCommentRepoMockRecorder is the mock recorder for MockCommentRepo.
type MockCommentRepoMockRecorder struct {
	mock *MockCommentRepo
}

// NewMockCommentRepo creates a new mock instance.
func NewMockCommentRepo(ctrl *gomock.Controller) *MockCommentRepo {
	mock := &MockCommentRepo{ctrl: ctrl}
	mock.recorder = &MockCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepo) EXPECT() *MockCommentRepoMockRecorder {
	return m.recorder
}

// CommentAction mocks base method.
func (m *MockCommentRepo) CommentAction(ctx context.Context, comment *event.CommentAction) (*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentAction", ctx, comment)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentAction indicates an expected call of CommentAction.
func (mr *MockCommentRepoMockRecorder) CommentAction(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentAction", reflect.TypeOf((*MockCommentRepo)(nil).CommentAction), ctx, comment)
}

// CountCommentByVideoId mocks base method.
func (m *MockCommentRepo) CountCommentByVideoId(ctx context.Context, videoId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCommentByVideoId", ctx, videoId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCommentByVideoId indicates an expected call of CountCommentByVideoId.
func (mr *MockCommentRepoMockRecorder) CountCommentByVideoId(ctx, videoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCommentByVideoId", reflect.TypeOf((*MockCommentRepo)(nil).CountCommentByVideoId), ctx, videoId)
}

// GetCommentListByVideoId mocks base method.
func (m *MockCommentRepo) GetCommentListByVideoId(ctx context.Context, videoId int64) ([]*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentListByVideoId", ctx, videoId)
	ret0, _ := ret[0].([]*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentListByVideoId indicates an expected call of GetCommentListByVideoId.
func (mr *MockCommentRepoMockRecorder) GetCommentListByVideoId(ctx, videoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentListByVideoId", reflect.TypeOf((*MockCommentRepo)(nil).GetCommentListByVideoId), ctx, videoId)
}

// MCountCommentByVideoId mocks base method.
func (m *MockCommentRepo) MCountCommentByVideoId(ctx context.Context, videoIds []int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MCountCommentByVideoId", ctx, videoIds)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MCountCommentByVideoId indicates an expected call of MCountCommentByVideoId.
func (mr *MockCommentRepoMockRecorder) MCountCommentByVideoId(ctx, videoIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCountCommentByVideoId", reflect.TypeOf((*MockCommentRepo)(nil).MCountCommentByVideoId), ctx, videoIds)
}
