// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"douyin/app/video/publish/job/internal/biz"
	"douyin/app/video/publish/job/internal/conf"
	"douyin/app/video/publish/job/internal/data"
	"douyin/app/video/publish/job/internal/server"
	"douyin/app/video/publish/job/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewOrm(confData)
	client := data.NewRedis(confData)
	minioClient := data.NewMinio(confData)
	consumer := data.NewKafka(confData)
	clientv3Client := server.NewEtcdCli(registry)
	discovery := server.NewDiscovery(clientv3Client)
	seqClient := data.NewSeqClient(discovery, logger)
	dataData, cleanup, err := data.NewData(confData, db, client, minioClient, consumer, logger, seqClient)
	if err != nil {
		return nil, nil, err
	}
	videoRepo := data.NewVideoRepo(dataData, logger)
	videoUsecase := biz.NewVideoUsecase(videoRepo, logger)
	publishService := service.NewPublishService(videoUsecase, consumer, logger)
	grpcServer := server.NewGRPCServer(confServer, publishService, logger)
	httpServer := server.NewHTTPServer(confServer, publishService, logger)
	registrar := server.NewRegistrar(clientv3Client)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
