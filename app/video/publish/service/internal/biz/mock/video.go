// Code generated by MockGen. DO NOT EDIT.
// Source: video.go
//
// Generated by this command:
//
//	mockgen -source=video.go -destination=mock/video.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	entity "douyin/app/video/publish/common/entity"
	event "douyin/app/video/publish/common/event"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVideoRepo is a mock of VideoRepo interface.
type MockVideoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepoMockRecorder
}

// MockVideoRepoMockRecorder is the mock recorder for MockVideoRepo.
type MockVideoRepoMockRecorder struct {
	mock *MockVideoRepo
}

// NewMockVideoRepo creates a new mock instance.
func NewMockVideoRepo(ctrl *gomock.Controller) *MockVideoRepo {
	mock := &MockVideoRepo{ctrl: ctrl}
	mock.recorder = &MockVideoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepo) EXPECT() *MockVideoRepoMockRecorder {
	return m.recorder
}

// CountUserPublishedVideoByUserId mocks base method.
func (m *MockVideoRepo) CountUserPublishedVideoByUserId(ctx context.Context, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserPublishedVideoByUserId", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserPublishedVideoByUserId indicates an expected call of CountUserPublishedVideoByUserId.
func (mr *MockVideoRepoMockRecorder) CountUserPublishedVideoByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserPublishedVideoByUserId", reflect.TypeOf((*MockVideoRepo)(nil).CountUserPublishedVideoByUserId), ctx, userId)
}

// GetPublishedVideosByLatestTime mocks base method.
func (m *MockVideoRepo) GetPublishedVideosByLatestTime(ctx context.Context, latestTime int64, limit int) ([]*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedVideosByLatestTime", ctx, latestTime, limit)
	ret0, _ := ret[0].([]*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedVideosByLatestTime indicates an expected call of GetPublishedVideosByLatestTime.
func (mr *MockVideoRepoMockRecorder) GetPublishedVideosByLatestTime(ctx, latestTime, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedVideosByLatestTime", reflect.TypeOf((*MockVideoRepo)(nil).GetPublishedVideosByLatestTime), ctx, latestTime, limit)
}

// GetPublishedVideosByUserId mocks base method.
func (m *MockVideoRepo) GetPublishedVideosByUserId(ctx context.Context, userId int64) ([]*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublishedVideosByUserId", ctx, userId)
	ret0, _ := ret[0].([]*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublishedVideosByUserId indicates an expected call of GetPublishedVideosByUserId.
func (mr *MockVideoRepoMockRecorder) GetPublishedVideosByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublishedVideosByUserId", reflect.TypeOf((*MockVideoRepo)(nil).GetPublishedVideosByUserId), ctx, userId)
}

// GetVideoById mocks base method.
func (m *MockVideoRepo) GetVideoById(ctx context.Context, id int64) (*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoById", ctx, id)
	ret0, _ := ret[0].(*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoById indicates an expected call of GetVideoById.
func (mr *MockVideoRepoMockRecorder) GetVideoById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoById", reflect.TypeOf((*MockVideoRepo)(nil).GetVideoById), ctx, id)
}

// MGetVideoByIds mocks base method.
func (m *MockVideoRepo) MGetVideoByIds(ctx context.Context, ids []int64) ([]*entity.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetVideoByIds", ctx, ids)
	ret0, _ := ret[0].([]*entity.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetVideoByIds indicates an expected call of MGetVideoByIds.
func (mr *MockVideoRepoMockRecorder) MGetVideoByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetVideoByIds", reflect.TypeOf((*MockVideoRepo)(nil).MGetVideoByIds), ctx, ids)
}

// PublishVideo mocks base method.
func (m *MockVideoRepo) PublishVideo(ctx context.Context, video *event.VideoUpload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishVideo", ctx, video)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishVideo indicates an expected call of PublishVideo.
func (mr *MockVideoRepoMockRecorder) PublishVideo(ctx, video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishVideo", reflect.TypeOf((*MockVideoRepo)(nil).PublishVideo), ctx, video)
}

// UploadVideo mocks base method.
func (m *MockVideoRepo) UploadVideo(ctx context.Context, data []byte, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadVideo", ctx, data, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadVideo indicates an expected call of UploadVideo.
func (mr *MockVideoRepoMockRecorder) UploadVideo(ctx, data, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadVideo", reflect.TypeOf((*MockVideoRepo)(nil).UploadVideo), ctx, data, objectName)
}
