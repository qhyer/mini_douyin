// Code generated by MockGen. DO NOT EDIT.
// Source: passport.go
//
// Generated by this command:
//
//	mockgen -source=passport.go -destination=mock/passport.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	entity "douyin/app/user/passport/common/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPassportRepo is a mock of PassportRepo interface.
type MockPassportRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPassportRepoMockRecorder
}

// MockPassportRepoMockRecorder is the mock recorder for MockPassportRepo.
type MockPassportRepoMockRecorder struct {
	mock *MockPassportRepo
}

// NewMockPassportRepo creates a new mock instance.
func NewMockPassportRepo(ctrl *gomock.Controller) *MockPassportRepo {
	mock := &MockPassportRepo{ctrl: ctrl}
	mock.recorder = &MockPassportRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassportRepo) EXPECT() *MockPassportRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockPassportRepo) CreateUser(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockPassportRepoMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPassportRepo)(nil).CreateUser), ctx, user)
}

// GetUserById mocks base method.
func (m *MockPassportRepo) GetUserById(ctx context.Context, id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockPassportRepoMockRecorder) GetUserById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockPassportRepo)(nil).GetUserById), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockPassportRepo) GetUserByName(ctx context.Context, name string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockPassportRepoMockRecorder) GetUserByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockPassportRepo)(nil).GetUserByName), ctx, name)
}

// MGetUserById mocks base method.
func (m *MockPassportRepo) MGetUserById(ctx context.Context, ids []int64) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetUserById", ctx, ids)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetUserById indicates an expected call of MGetUserById.
func (mr *MockPassportRepoMockRecorder) MGetUserById(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetUserById", reflect.TypeOf((*MockPassportRepo)(nil).MGetUserById), ctx, ids)
}
