// Code generated by MockGen. DO NOT EDIT.
// Source: chat.go
//
// Generated by this command:
//
//	mockgen -source=chat.go -destination=mock/chat.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	entity "douyin/app/user/chat/common/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockChatRepo is a mock of ChatRepo interface.
type MockChatRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepoMockRecorder
}

// MockChatRepoMockRecorder is the mock recorder for MockChatRepo.
type MockChatRepoMockRecorder struct {
	mock *MockChatRepo
}

// NewMockChatRepo creates a new mock instance.
func NewMockChatRepo(ctrl *gomock.Controller) *MockChatRepo {
	mock := &MockChatRepo{ctrl: ctrl}
	mock.recorder = &MockChatRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepo) EXPECT() *MockChatRepoMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockChatRepo) CreateMessage(ctx context.Context, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockChatRepoMockRecorder) CreateMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockChatRepo)(nil).CreateMessage), ctx, message)
}
