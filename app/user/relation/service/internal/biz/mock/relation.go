// Code generated by MockGen. DO NOT EDIT.
// Source: relation.go
//
// Generated by this command:
//
//	mockgen -source=relation.go -destination=mock/relation.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	event "douyin/app/user/relation/common/event"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRelationRepo is a mock of RelationRepo interface.
type MockRelationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRelationRepoMockRecorder
}

// MockRelationRepoMockRecorder is the mock recorder for MockRelationRepo.
type MockRelationRepoMockRecorder struct {
	mock *MockRelationRepo
}

// NewMockRelationRepo creates a new mock instance.
func NewMockRelationRepo(ctrl *gomock.Controller) *MockRelationRepo {
	mock := &MockRelationRepo{ctrl: ctrl}
	mock.recorder = &MockRelationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationRepo) EXPECT() *MockRelationRepoMockRecorder {
	return m.recorder
}

// CountFollowByUserId mocks base method.
func (m *MockRelationRepo) CountFollowByUserId(ctx context.Context, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFollowByUserId", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFollowByUserId indicates an expected call of CountFollowByUserId.
func (mr *MockRelationRepoMockRecorder) CountFollowByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFollowByUserId", reflect.TypeOf((*MockRelationRepo)(nil).CountFollowByUserId), ctx, userId)
}

// CountFollowerByUserId mocks base method.
func (m *MockRelationRepo) CountFollowerByUserId(ctx context.Context, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFollowerByUserId", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountFollowerByUserId indicates an expected call of CountFollowerByUserId.
func (mr *MockRelationRepoMockRecorder) CountFollowerByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFollowerByUserId", reflect.TypeOf((*MockRelationRepo)(nil).CountFollowerByUserId), ctx, userId)
}

// GetFollowListByUserId mocks base method.
func (m *MockRelationRepo) GetFollowListByUserId(ctx context.Context, userId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowListByUserId", ctx, userId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowListByUserId indicates an expected call of GetFollowListByUserId.
func (mr *MockRelationRepoMockRecorder) GetFollowListByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowListByUserId", reflect.TypeOf((*MockRelationRepo)(nil).GetFollowListByUserId), ctx, userId)
}

// GetFollowerListByUserId mocks base method.
func (m *MockRelationRepo) GetFollowerListByUserId(ctx context.Context, userId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowerListByUserId", ctx, userId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowerListByUserId indicates an expected call of GetFollowerListByUserId.
func (mr *MockRelationRepoMockRecorder) GetFollowerListByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerListByUserId", reflect.TypeOf((*MockRelationRepo)(nil).GetFollowerListByUserId), ctx, userId)
}

// GetFriendListByUserId mocks base method.
func (m *MockRelationRepo) GetFriendListByUserId(ctx context.Context, userId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendListByUserId", ctx, userId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendListByUserId indicates an expected call of GetFriendListByUserId.
func (mr *MockRelationRepoMockRecorder) GetFriendListByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendListByUserId", reflect.TypeOf((*MockRelationRepo)(nil).GetFriendListByUserId), ctx, userId)
}

// IsFollowByUserId mocks base method.
func (m *MockRelationRepo) IsFollowByUserId(ctx context.Context, userId, toUserId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowByUserId", ctx, userId, toUserId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollowByUserId indicates an expected call of IsFollowByUserId.
func (mr *MockRelationRepoMockRecorder) IsFollowByUserId(ctx, userId, toUserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowByUserId", reflect.TypeOf((*MockRelationRepo)(nil).IsFollowByUserId), ctx, userId, toUserId)
}

// IsFollowByUserIds mocks base method.
func (m *MockRelationRepo) IsFollowByUserIds(ctx context.Context, userId int64, toUserIds []int64) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowByUserIds", ctx, userId, toUserIds)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollowByUserIds indicates an expected call of IsFollowByUserIds.
func (mr *MockRelationRepoMockRecorder) IsFollowByUserIds(ctx, userId, toUserIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowByUserIds", reflect.TypeOf((*MockRelationRepo)(nil).IsFollowByUserIds), ctx, userId, toUserIds)
}

// RelationAction mocks base method.
func (m *MockRelationRepo) RelationAction(ctx context.Context, relation *event.RelationAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelationAction", ctx, relation)
	ret0, _ := ret[0].(error)
	return ret0
}

// RelationAction indicates an expected call of RelationAction.
func (mr *MockRelationRepoMockRecorder) RelationAction(ctx, relation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelationAction", reflect.TypeOf((*MockRelationRepo)(nil).RelationAction), ctx, relation)
}
