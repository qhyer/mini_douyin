// Code generated by MockGen. DO NOT EDIT.
// Source: account.go
//
// Generated by this command:
//
//	mockgen -source=account.go -destination=mock/account.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	v1 "douyin/api/user/account/service/v1"
	v10 "douyin/api/user/passport/service/v1"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockAccountRepo) GetUserInfo(ctx context.Context, userId, toUserId int64) (*v1.GetUserInfoByUserIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userId, toUserId)
	ret0, _ := ret[0].(*v1.GetUserInfoByUserIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockAccountRepoMockRecorder) GetUserInfo(ctx, userId, toUserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockAccountRepo)(nil).GetUserInfo), ctx, userId, toUserId)
}

// Login mocks base method.
func (m *MockAccountRepo) Login(ctx context.Context, username, password string) (*v10.DouyinUserLoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(*v10.DouyinUserLoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAccountRepoMockRecorder) Login(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAccountRepo)(nil).Login), ctx, username, password)
}

// Register mocks base method.
func (m *MockAccountRepo) Register(ctx context.Context, username, password string) (*v10.DouyinUserRegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, username, password)
	ret0, _ := ret[0].(*v10.DouyinUserRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAccountRepoMockRecorder) Register(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAccountRepo)(nil).Register), ctx, username, password)
}
