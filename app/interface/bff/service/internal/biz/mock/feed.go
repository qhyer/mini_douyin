// Code generated by MockGen. DO NOT EDIT.
// Source: feed.go
//
// Generated by this command:
//
//	mockgen -source=feed.go -destination=mock/feed.go
//

// Package mock_biz is a generated GoMock package.
package mock_biz

import (
	context "context"
	v1 "douyin/api/video/feed/service/v1"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeedRepo is a mock of FeedRepo interface.
type MockFeedRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFeedRepoMockRecorder
}

// MockFeedRepoMockRecorder is the mock recorder for MockFeedRepo.
type MockFeedRepoMockRecorder struct {
	mock *MockFeedRepo
}

// NewMockFeedRepo creates a new mock instance.
func NewMockFeedRepo(ctrl *gomock.Controller) *MockFeedRepo {
	mock := &MockFeedRepo{ctrl: ctrl}
	mock.recorder = &MockFeedRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedRepo) EXPECT() *MockFeedRepoMockRecorder {
	return m.recorder
}

// Feed mocks base method.
func (m *MockFeedRepo) Feed(ctx context.Context, userId, latestTime int64) (*v1.FeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed", ctx, userId, latestTime)
	ret0, _ := ret[0].(*v1.FeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feed indicates an expected call of Feed.
func (mr *MockFeedRepoMockRecorder) Feed(ctx, userId, latestTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockFeedRepo)(nil).Feed), ctx, userId, latestTime)
}
